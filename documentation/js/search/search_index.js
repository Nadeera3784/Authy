var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.643,1,2.298]],["body/modules/AppModule.html",[0,2.125,1,4.345,2,1.642,3,2.291,4,2.689,5,2.689,6,3.37,7,0.026,8,3.672,9,3.37,10,2.704,11,1.938,12,1.938,13,0.244,14,0.244,15,0.187,16,3.176,17,2.971,18,0.566,19,0.553,20,3.176,21,3.458,22,1.642,23,2.689,24,1.938,25,4.432,26,2.971,27,3.176,28,3.176,29,2.129,30,2.129,31,3.176,32,2.368,33,4.432,34,3.752,35,3.176,36,3.176,37,2.689,38,3.176,39,3.176,40,3.176,41,2.971,42,3.176,43,2.689,44,3.176,45,2.689,46,2.971,47,3.176,48,3.752,49,2.368,50,3.752,51,3.176,52,3.752,53,3.176,54,3.752,55,3.176,56,3.176,57,3.176,58,3.176,59,3.176,60,2.689,61,1.082,62,3.176,63,3.176,64,3.176,65,3.176,66,3.176,67,2.689,68,4.432,69,3.176,70,3.176,71,3.176,72,3.176,73,3.176,74,3.176,75,1.321,76,2.368,77,3.176,78,3.176,79,0.244,80,0.052,81,0.016,82,0.016]],["title/controllers/AuthController.html",[83,1.772,84,2.298]],["body/controllers/AuthController.html",[7,0.025,13,0.1,14,0.1,15,0.076,18,0.466,19,0.226,29,0.869,30,0.869,41,0.869,46,0.869,60,3.214,61,1.645,75,0.539,79,0.1,80,0.021,81,0.008,82,0.008,83,0.67,84,1.476,85,0.67,86,1.097,87,0.966,88,0.124,89,0.579,90,2.423,91,1.633,92,2.202,93,2.202,94,2.202,95,3.078,96,2.872,97,1.296,98,2.951,99,1.406,100,2.202,101,1.296,102,2.202,103,1.685,104,1.296,105,3.938,106,3.438,107,4.291,108,4.291,109,4.291,110,4.291,111,4.055,112,4.291,113,3.078,114,3.938,115,3.387,116,3.387,117,0.57,118,1.296,119,0.95,120,0.659,121,0.651,122,0.829,123,3.806,124,1.084,125,1.717,126,1.296,127,1.296,128,1.344,129,3.387,130,2.202,131,1.296,132,3.495,133,1.296,134,1.296,135,1.476,136,1.296,137,1.296,138,2.951,139,1.296,140,1.296,141,3.841,142,1.296,143,1.296,144,1.296,145,1.296,146,3.356,147,1.642,148,1.296,149,1.296,150,2.951,151,1.296,152,1.296,153,3.387,154,1.296,155,2.526,156,0.67,157,0.966,158,1.296,159,2.526,160,0.966,161,3.283,162,4.025,163,0.966,164,0.504,165,2.202,166,1.296,167,1.296,168,1.296,169,1.296,170,1.116,171,1.097,172,1.195,173,1.097,174,0.966,175,0.966,176,1.752,177,1.296,178,1.097,179,0.726,180,1.296,181,0.869,182,1.296,183,0.869,184,1.296,185,1.296,186,1.296,187,0.388,188,1.045,189,0.982,190,1.296,191,1.296,192,3.078,193,3.938,194,3.841,195,1.296,196,1.496,197,1.235,198,1.097,199,1.296,200,2.872,201,0.966,202,1.296,203,1.296,204,1.344,205,1.281,206,2.202,207,1.897,208,2.202,209,2.001,210,2.83,211,2.83,212,3.54,213,3.283,214,3.283,215,1.097,216,1.296,217,3.283,218,1.296,219,2.544,220,2.125,221,1.296,222,1.296,223,0.791,224,1.296,225,1.296,226,1.296,227,1.296,228,3.387,229,1.296,230,1.296,231,1.296,232,0.966,233,1.296,234,1.296,235,1.296,236,1.296,237,0.869,238,1.296,239,1.296,240,1.296,241,1.865,242,1.296,243,2.202,244,1.296,245,1.296,246,1.296]],["title/modules/AuthModule.html",[0,1.643,6,1.919]],["body/modules/AuthModule.html",[0,1.985,2,1.491,3,2.14,6,3.836,7,0.026,9,3.266,10,2.525,11,1.76,12,1.76,13,0.222,14,0.222,15,0.17,17,2.775,18,0.574,19,0.503,21,2.963,22,1.491,23,2.442,24,1.76,37,2.442,46,1.933,48,2.442,54,2.442,61,0.982,79,0.222,80,0.047,81,0.015,82,0.015,84,3.246,85,2.14,120,0.432,170,2.267,172,2.703,173,2.442,247,2.442,248,2.442,249,2.884,250,2.442,251,3.359,252,3.558,253,3.558,254,3.558,255,3.558,256,2.884,257,2.318,258,3.087,259,2.442,260,2.884,261,1.933,262,2.884,263,1.383,264,2.884,265,2.151,266,2.884,267,2.525,268,2.884,269,2.884,270,2.884,271,2.884,272,2.884,273,2.884,274,2.884,275,2.884,276,2.884,277,2.442,278,2.884,279,2.884,280,2.884,281,2.884,282,2.884,283,1.933,284,2.442,285,2.884,286,2.884,287,2.151,288,2.151]],["title/injectables/AuthService.html",[172,1.426,289,0.329]],["body/injectables/AuthService.html",[7,0.026,13,0.168,14,0.168,15,0.129,18,0.455,19,0.381,24,1.334,61,2.021,67,1.851,75,1.401,76,2.511,79,0.168,80,0.036,81,0.012,82,0.012,88,0.21,89,0.885,90,2.742,91,1.848,95,2.511,103,0.795,117,0.783,119,1.304,120,0.87,121,0.722,122,1.138,124,1.441,125,2.191,156,1.13,170,2.133,171,1.851,172,1.401,187,1.007,188,1.679,189,1.832,196,1.694,197,1.641,198,1.851,201,2.511,204,2.816,205,0.975,207,2.3,209,1.995,215,1.851,241,3.478,251,2.836,261,1.465,265,1.63,267,2.054,287,2.511,288,2.511,289,0.323,290,0.654,291,1.851,292,3.368,293,3.368,294,3.368,295,3.368,296,3.368,297,3.368,298,2.186,299,4.615,300,4.645,301,2.186,302,3.368,303,3.063,304,2.186,305,3.368,306,1.68,307,2.186,308,1.886,309,2.186,310,2.186,311,3.368,312,2.186,313,3.368,314,2.186,315,3.368,316,2.186,317,3.368,318,2.186,319,2.186,320,2.257,321,1.63,322,2.186,323,2.186,324,2.186,325,3.063,326,2.186,327,1.851,328,2.186,329,2.186,330,2.186,331,2.186,332,2.186,333,2.186,334,1.63,335,2.186,336,1.63,337,2.186,338,2.186,339,2.186,340,2.186,341,1.851,342,2.186,343,1.334,344,1.465,345,3.368,346,3.368,347,2.186,348,2.186,349,2.186,350,1.63,351,2.186,352,2.186]],["title/injectables/CacheService.html",[289,0.329,353,1.919]],["body/injectables/CacheService.html",[7,0.025,13,0.253,14,0.253,15,0.194,18,0.448,19,0.572,21,3.292,22,1.697,49,2.447,50,2.778,52,2.778,75,1.365,76,2.447,79,0.253,80,0.054,81,0.016,82,0.016,88,0.315,89,1.191,90,2.53,91,1.705,117,0.774,119,1.196,120,0.778,121,0.75,122,1.044,124,1.191,125,1.365,187,0.982,188,1.889,196,1.356,197,1.356,209,1.649,289,0.435,290,0.982,306,2.122,353,2.539,354,2.778,355,1.649,356,4.398,357,4.534,358,4.534,359,4.534,360,4.534,361,3.281,362,3.039,363,4.321,364,4.534,365,6.08,366,4.534,367,5.194,368,2.539,369,3.281,370,2.778,371,3.281,372,3.281,373,3.281,374,3.281,375,3.281,376,4.534,377,3.281,378,3.281,379,3.281,380,3.281]],["title/classes/CreateProductsDto.html",[80,0.056,381,2.091]],["body/classes/CreateProductsDto.html",[7,0.025,13,0.325,14,0.325,15,0.249,18,0.463,79,0.325,80,0.088,81,0.019,82,0.019,88,0.406,99,2.005,106,3.297,117,0.814,120,0.882,121,0.685,164,1.642,306,2.084,355,1.95,381,3.27,382,1.642,383,5.243,384,3.151,385,4.985,386,3.592,387,3.577,388,3.577,389,3.577,390,2.969,391,3.202,392,1.758,393,3.202]],["title/classes/CreateUsersDto.html",[80,0.056,394,2.091]],["body/classes/CreateUsersDto.html",[7,0.025,13,0.278,14,0.278,15,0.213,18,0.504,79,0.278,80,0.079,81,0.017,82,0.017,88,0.347,99,2.071,103,2.122,117,0.841,120,0.818,121,0.708,122,1.258,164,1.406,237,3.661,306,2.074,308,3.058,350,4.073,355,1.762,382,1.406,386,2.206,390,2.618,391,3.144,392,1.505,393,3.236,394,2.955,395,5.3,396,2.697,397,3.616,398,3.616,399,3.616,400,3.616,401,3.062,402,3.616,403,3.062,404,3.616,405,2.823,406,3.062,407,3.616,408,2.955,409,4.35,410,2.424,411,2.206,412,2.697,413,2.025,414,3.062,415,3.616,416,2.424]],["title/classes/EmailAvailabilityDto.html",[80,0.056,98,2.298]],["body/classes/EmailAvailabilityDto.html",[7,0.025,13,0.359,14,0.359,15,0.276,18,0.492,79,0.359,80,0.094,81,0.02,82,0.02,88,0.448,98,3.823,99,1.59,103,2.24,117,0.645,121,0.543,164,1.814,306,1.82,355,2.074,382,1.814,390,2.734,391,2.949,392,1.942,393,2.949,408,3.48,417,4.829,418,3.952,419,3.129,420,4.667]],["title/injectables/EmailFilter.html",[289,0.329,413,1.919]],["body/injectables/EmailFilter.html",[7,0.025,13,0.293,14,0.293,15,0.225,18,0.484,19,0.663,41,2.551,61,1.908,79,0.293,80,0.082,81,0.018,82,0.018,88,0.365,89,1.316,91,1.669,103,2.165,117,0.774,119,1.29,120,0.891,121,0.652,122,1.126,124,1.316,125,1.583,170,2.469,187,1.139,189,1.698,196,1.139,197,1.139,209,1.822,289,0.481,290,1.139,306,1.9,392,1.583,411,3.057,413,3.137,421,3.222,422,5.01,423,3.806,424,3.806,425,5.01,426,5.952,427,3.806,428,3.806,429,5.01,430,3.806,431,5.01,432,2.551,433,2.838,434,3.806,435,3.806,436,3.806]],["title/injectables/FacebookGuard.html",[183,2.298,289,0.329]],["body/injectables/FacebookGuard.html",[7,0.025,13,0.389,14,0.389,15,0.299,18,0.517,19,0.882,79,0.389,80,0.083,81,0.022,82,0.022,183,4.014,263,2.426,289,0.575,290,1.514,437,4.285,438,3.774,439,2.616,440,5.061]],["title/injectables/FacebookStrategy.html",[252,2.091,289,0.329]],["body/injectables/FacebookStrategy.html",[7,0.025,13,0.345,14,0.248,15,0.191,18,0.522,19,0.562,21,3.474,22,1.669,61,1.895,75,1.343,79,0.248,80,0.053,81,0.016,82,0.016,88,0.31,89,1.178,91,1.444,103,1.63,117,0.619,119,1.032,120,0.833,121,0.522,122,0.901,124,0.848,128,2.734,156,1.669,172,2.517,187,1.341,188,1.63,196,1.54,197,0.966,204,1.969,207,1.807,252,2.734,257,1.807,263,1.548,289,0.43,290,0.966,306,1.931,320,2.164,325,3.342,343,1.969,344,2.164,411,3.141,439,1.669,441,2.733,442,2.164,443,3.228,444,2.733,445,4.36,446,5.356,447,4.36,448,4.482,449,3.228,450,3.228,451,3.342,452,3.228,453,2.733,454,3.342,455,2.407,456,2.407,457,2.164,458,2.164,459,2.733,460,2.407,461,2.407,462,2.733,463,3.228,464,2.733,465,3.228,466,2.733,467,3.228,468,2.733,469,3.228,470,3.795,471,2.733,472,2.733,473,2.733,474,2.733,475,2.733,476,2.733,477,3.228,478,2.407,479,2.733]],["title/injectables/GoogleGuard.html",[181,2.298,289,0.329]],["body/injectables/GoogleGuard.html",[7,0.025,13,0.389,14,0.389,15,0.299,18,0.517,19,0.882,79,0.389,80,0.083,81,0.022,82,0.022,181,4.014,263,2.426,289,0.575,290,1.514,438,3.774,439,2.616,480,4.285,481,5.061]],["title/injectables/GoogleStrategy.html",[253,2.091,289,0.329]],["body/injectables/GoogleStrategy.html",[7,0.025,13,0.253,14,0.253,15,0.194,18,0.525,19,0.572,21,3.49,22,1.697,61,1.769,75,1.365,79,0.253,80,0.054,81,0.016,82,0.016,88,0.315,89,1.191,91,1.456,103,1.649,117,0.627,119,1.044,120,0.778,121,0.528,122,0.911,124,0.862,135,3.039,156,1.697,172,2.53,187,1.356,188,1.649,196,1.554,197,0.982,204,2.002,207,1.837,253,2.766,257,1.837,263,1.573,289,0.435,290,0.982,306,1.941,320,2.2,325,3.873,343,2.002,344,2.2,411,3.169,439,1.697,442,2.2,444,2.778,445,4.744,446,4.978,447,4.398,454,3.381,455,2.447,456,2.447,457,2.2,458,2.2,459,2.778,460,2.447,461,2.447,462,2.778,464,2.778,466,2.778,468,2.778,470,2.778,471,2.778,472,2.778,473,2.778,474,2.778,475,2.778,476,2.778,478,2.447,479,2.778,482,2.778,483,3.281,484,5.602,485,3.281,486,2.778,487,3.281,488,3.281,489,3.281,490,3.281,491,3.281,492,3.281,493,3.281]],["title/injectables/HashService.html",[251,1.772,289,0.329]],["body/injectables/HashService.html",[7,0.025,13,0.298,14,0.298,15,0.228,18,0.437,19,0.674,79,0.298,80,0.063,81,0.018,82,0.018,88,0.372,89,1.331,90,2.654,91,1.789,117,0.7,119,1.166,120,0.759,121,0.589,122,1.018,124,1.331,125,2.107,196,1.158,197,1.515,201,3.778,209,1.842,251,2.619,289,0.486,290,1.158,306,2.128,308,2.167,362,2.594,363,2.594,368,3.162,494,3.277,495,5.647,496,4.289,497,5.647,498,5.991,499,3.87,500,3.87,501,5.066,502,5.991,503,3.87,504,5.066,505,3.87,506,3.277,507,3.87]],["title/classes/IdParamValidation.html",[80,0.056,508,2.091]],["body/classes/IdParamValidation.html",[7,0.024,13,0.369,14,0.369,15,0.283,18,0.414,79,0.369,80,0.095,81,0.021,82,0.021,88,0.461,99,1.634,117,0.663,121,0.558,205,2.78,355,2.109,368,3.247,382,1.865,390,2.78,392,1.996,508,3.538,509,4.91,510,3.887,511,4.062,512,4.797,513,4.797,514,5.799]],["title/injectables/JwtGuard.html",[179,1.919,289,0.329]],["body/injectables/JwtGuard.html",[7,0.025,13,0.427,14,0.247,15,0.189,18,0.385,19,0.559,61,1.986,75,1.856,79,0.247,80,0.053,81,0.016,82,0.016,88,0.308,89,1.172,90,2.134,117,0.767,119,1.277,120,0.831,121,0.645,122,1.115,124,1.457,179,2.498,188,2.195,196,1.535,207,2.872,209,1.866,212,3.439,220,2.872,263,1.537,289,0.428,290,0.959,306,1.637,327,2.714,336,2.39,343,2.721,356,4.696,362,2.149,438,2.39,439,1.657,451,2.39,515,2.714,516,3.777,517,4.46,518,4.46,519,4.46,520,3.777,521,5.499,522,3.205,523,4.46,524,3.205,525,4.46,526,4.46,527,3.205,528,4.46,529,3.205,530,4.46,531,3.205,532,3.205,533,3.205,534,3.205,535,3.205,536,4.46,537,3.205,538,3.205,539,5.13,540,3.205,541,3.205,542,3.205,543,4.46,544,3.205,545,3.205]],["title/injectables/JwtStrategy.html",[254,2.091,289,0.329]],["body/injectables/JwtStrategy.html",[7,0.025,13,0.293,14,0.293,15,0.225,18,0.534,19,0.663,21,3.625,22,1.968,61,1.908,75,1.583,79,0.293,80,0.062,81,0.018,82,0.018,88,0.365,89,1.316,91,1.571,117,0.692,119,1.154,120,0.75,121,0.443,122,1.007,124,1,125,1.583,156,1.968,172,2.642,187,1.499,188,1.822,196,1.139,197,1.139,204,2.322,207,2.131,209,1.384,254,3.057,263,1.825,277,3.222,283,2.551,289,0.481,290,1.139,320,2.551,343,2.322,344,2.551,411,3.057,439,1.968,442,2.551,455,2.838,456,2.838,457,2.551,458,2.551,460,2.838,461,2.838,478,2.838,546,3.222,547,3.806,548,5.01,549,3.806,550,3.806,551,3.806,552,3.806,553,3.806,554,3.806]],["title/classes/LoginDto.html",[80,0.056,138,2.298]],["body/classes/LoginDto.html",[7,0.025,13,0.342,14,0.342,15,0.262,18,0.478,79,0.342,80,0.091,81,0.02,82,0.02,88,0.427,99,1.884,103,2.191,117,0.765,121,0.644,138,3.708,164,1.727,306,2.013,308,3.374,355,2.012,382,1.727,390,2.889,391,3.115,392,1.848,393,3.115,408,3.375,410,2.978,416,2.978,419,2.978,555,3.761,556,4.442,557,3.761,558,4.442]],["title/injectables/PrismaService.html",[289,0.329,559,1.643]],["body/injectables/PrismaService.html",[7,0.025,13,0.323,14,0.323,15,0.248,18,0.461,19,0.732,79,0.323,80,0.069,81,0.019,82,0.019,88,0.403,89,1.403,91,1.858,117,0.738,119,0.967,120,0.629,121,0.489,122,0.844,124,1.403,197,1.597,289,0.513,290,1.256,439,2.761,559,2.56,560,3.555,561,4.971,562,5.34,563,6.52,564,5.34,565,6.179,566,4.199,567,3.555,568,4.199,569,3.555,570,3.555,571,4.199,572,4.199,573,4.199]],["title/controllers/ProductsController.html",[83,1.772,574,2.298]],["body/controllers/ProductsController.html",[7,0.025,13,0.109,14,0.109,15,0.084,18,0.47,19,0.247,79,0.109,80,0.023,81,0.009,82,0.009,83,0.733,85,0.733,87,1.058,88,0.136,89,0.624,90,2.387,91,1.608,99,1.362,105,3.858,106,3.397,107,4.278,108,4.278,109,4.278,110,4.278,111,4.066,112,4.278,113,2.981,114,3.858,117,0.552,119,0.92,120,0.599,121,0.677,122,0.803,123,3.563,124,1.05,125,1.663,141,4.337,146,3.243,147,3.426,155,2.288,156,0.733,157,1.772,159,1.772,160,1.058,161,3.226,162,3.964,163,1.058,164,0.551,174,1.058,175,1.058,179,0.794,187,0.424,188,0.864,189,1.06,192,2.981,193,3.858,194,3.858,196,1.374,197,1.374,205,1.368,209,1.934,210,3.226,211,3.226,212,3.563,213,2.981,214,2.981,217,2.981,219,2.68,220,2.422,223,2.439,232,1.058,353,1.718,381,2.803,405,0.733,508,3.157,510,2.68,574,1.593,575,1.201,576,5.01,577,2.406,578,2.056,579,1.593,580,2.406,581,1.201,582,1.201,583,3.59,584,5.288,585,2.598,586,1.418,587,1.201,588,2.598,589,1.201,590,2.598,591,1.418,592,1.201,593,3.385,594,2.598,595,2.598,596,1.418,597,2.377,598,1.418,599,1.418,600,1.058,601,1.201,602,1.418,603,1.418,604,1.201,605,2.94,606,1.201,607,2.598,608,1.418,609,1.201,610,0.951,611,2.012,612,1.718,613,1.201,614,1.201,615,0.951,616,2.012,617,0.951,618,1.45,619,1.201,620,1.201,621,1.201,622,0.951,623,1.201,624,1.201,625,1.201,626,1.418,627,1.418,628,2.377,629,2.377,630,1.201,631,1.418,632,1.418,633,2.377,634,1.418,635,1.418,636,1.418,637,1.201,638,1.418,639,1.418,640,1.201,641,1.201,642,1.418,643,2.598,644,1.201,645,1.418,646,1.418,647,1.201,648,1.201,649,1.418,650,1.201,651,1.201,652,1.418]],["title/modules/ProductsModule.html",[0,1.643,8,2.091]],["body/modules/ProductsModule.html",[0,2.451,2,2.029,3,2.643,7,0.025,8,4.171,10,3.119,11,2.394,12,2.394,13,0.302,14,0.302,15,0.232,17,2.631,18,0.539,19,0.684,79,0.302,80,0.064,81,0.018,82,0.018,85,2.643,257,2.863,258,3.812,353,3.586,559,3.278,574,3.811,612,3.828,613,3.323,614,3.323,653,3.323,654,3.323,655,3.323,656,3.925,657,3.925,658,2.631]],["title/injectables/ProductsService.html",[289,0.329,612,1.919]],["body/injectables/ProductsService.html",[7,0.026,13,0.208,14,0.208,15,0.159,18,0.443,19,0.47,79,0.208,80,0.044,81,0.014,82,0.014,88,0.259,89,1.036,90,2.784,91,1.876,117,0.814,119,1.355,120,0.882,121,0.685,122,1.183,124,1.498,125,2.371,146,1.646,187,1.18,188,0.981,189,1.204,196,0.807,197,1.705,205,2.746,209,2.073,223,2.406,289,0.379,290,0.807,303,4.069,368,3.447,381,3.329,559,2.459,577,2.644,578,2.644,579,2.644,580,2.644,584,3.34,605,3.682,610,3.125,612,2.209,615,1.809,616,3.34,617,1.809,658,1.809,659,2.285,660,3.34,661,2.285,662,2.698,663,2.406,664,2.698,665,2.698,666,3.34,667,2.698,668,2.285,669,2.698,670,3.34,671,2.698,672,3.34,673,2.698,674,3.34,675,2.698,676,2.285,677,2.698,678,3.945,679,2.698,680,2.698,681,2.698,682,2.698]],["title/classes/RegisterDto.html",[80,0.056,150,2.298]],["body/classes/RegisterDto.html",[7,0.025,13,0.305,14,0.305,15,0.234,18,0.493,79,0.305,80,0.084,81,0.018,82,0.018,88,0.38,99,2.059,103,2.077,117,0.835,120,0.855,121,0.703,150,3.446,164,1.539,306,2.115,308,3.197,355,1.87,382,1.539,386,2.415,390,3.003,391,3.238,392,1.647,393,3.238,408,3.136,409,2.952,410,2.653,416,3.446,419,2.653,557,3.352,683,3.352,684,5.709,685,3.958,686,3.958,687,3.958,688,3.958,689,3.958,690,2.952,691,3.958,692,3.958]],["title/guards/RoleGuard.html",[618,2.091,693,2.556]],["body/guards/RoleGuard.html",[7,0.026,13,0.294,14,0.294,15,0.226,18,0.485,19,0.667,41,3.371,46,2.565,79,0.294,80,0.063,81,0.018,82,0.018,88,0.367,89,1.321,91,1.575,117,0.695,119,1.158,120,0.753,121,0.585,122,1.011,124,1.005,132,3.24,187,1.145,196,1.504,209,1.829,237,2.565,289,0.483,336,2.854,405,2.904,433,2.854,454,3.75,516,5.051,520,4.258,521,5.051,570,3.24,618,3.068,621,3.24,694,3.827,695,3.24,696,3.827,697,6.36,698,3.827,699,3.827,700,3.24,701,3.827,702,3.827,703,3.827,704,5.617,705,3.827,706,3.827,707,3.827]],["title/classes/UpdateProductsDto.html",[80,0.056,605,2.091]],["body/classes/UpdateProductsDto.html",[7,0.025,13,0.325,14,0.325,15,0.249,18,0.463,79,0.325,80,0.088,81,0.019,82,0.019,88,0.406,99,2.005,106,3.297,117,0.814,120,0.882,121,0.685,164,1.642,306,2.084,355,1.95,382,1.642,384,3.151,385,4.985,386,3.592,387,3.577,388,3.577,389,3.577,390,2.969,391,3.202,392,1.758,393,3.202,605,3.27,708,5.243]],["title/classes/UpdateUsersDto.html",[80,0.056,709,2.091]],["body/classes/UpdateUsersDto.html",[7,0.025,13,0.285,14,0.285,15,0.219,18,0.477,79,0.285,80,0.081,81,0.018,82,0.018,88,0.356,99,2.088,103,2.01,117,0.847,120,0.828,121,0.713,122,1.266,164,1.44,237,3.705,306,2.085,308,3.095,350,4.121,355,1.79,382,1.44,386,2.26,390,2.65,391,3.169,392,1.541,393,3.258,396,2.762,401,3.136,403,3.136,405,2.857,406,3.136,408,3.002,409,4.392,410,2.483,412,2.762,416,2.483,419,2.483,709,3.002,710,5.336,711,3.704,712,3.704,713,3.704,714,3.704,715,3.704]],["title/classes/UserCreatedEvent.html",[80,0.056,176,2.091]],["body/classes/UserCreatedEvent.html",[7,0.025,13,0.356,14,0.356,15,0.273,79,0.356,80,0.076,81,0.02,82,0.02,88,0.444,90,2.551,117,0.783,119,1.064,120,0.692,121,0.66,122,0.929,176,3.458,187,1.382,205,2.927,355,2.062,368,3.674,382,1.796,716,5.192,717,3.912,718,5.668,719,5.668,720,4.621]],["title/injectables/UserCreatedListener.html",[255,2.091,289,0.329]],["body/injectables/UserCreatedListener.html",[7,0.025,13,0.293,14,0.293,15,0.225,18,0.534,19,0.663,29,2.551,30,2.551,61,1.296,79,0.293,80,0.062,81,0.018,82,0.018,88,0.365,89,1.316,91,1.571,99,1.296,117,0.692,119,1.154,120,0.75,121,0.583,122,1.007,124,1,170,2.517,172,2.642,176,3.632,178,3.222,187,1.499,188,1.822,189,2.235,196,1.499,197,1.499,205,2.235,255,3.057,289,0.481,290,1.139,432,2.551,442,2.551,458,2.551,721,4.743,722,3.222,723,5.01,724,3.806,725,5.01,726,5.01,727,3.806,728,3.806,729,3.806,730,3.806,731,3.806,732,3.806,733,3.806]],["title/controllers/UsersController.html",[83,1.772,734,2.298]],["body/controllers/UsersController.html",[7,0.025,13,0.114,14,0.114,15,0.087,18,0.466,19,0.258,61,2.144,79,0.114,80,0.024,81,0.009,82,0.009,83,0.765,85,0.765,87,1.104,88,0.142,89,0.647,90,2.414,91,1.627,99,1.395,105,3.918,106,3.428,107,4.327,108,4.327,109,4.327,110,4.327,111,4.103,112,4.327,113,3.054,114,3.918,117,0.566,119,0.943,120,0.613,121,0.675,122,0.823,123,3.615,124,1.076,125,1.704,141,4.327,146,3.206,147,3.296,155,2.359,156,0.765,157,1.837,159,1.837,160,1.104,161,3.296,162,4.022,163,1.104,164,0.576,170,1.23,174,1.104,175,1.104,179,0.829,187,0.443,188,0.539,189,0.66,192,3.054,193,3.918,194,3.918,196,1.225,197,1.225,205,1.411,209,1.911,210,3.054,211,3.054,212,3.522,213,3.054,214,3.054,217,3.054,219,2.745,220,2.293,223,2.498,232,1.104,394,2.859,405,0.765,412,1.104,432,0.992,508,3.206,510,2.745,577,2.472,578,2.121,579,1.651,580,2.472,581,1.254,582,1.254,585,2.679,587,1.254,588,2.679,589,1.254,590,2.679,592,1.254,593,3.467,594,2.679,595,2.679,600,1.104,601,1.254,604,1.254,606,1.254,607,2.679,609,1.254,610,0.992,611,2.086,615,0.992,617,0.992,618,1.503,619,1.254,620,1.254,622,0.992,623,1.254,624,1.254,625,1.254,630,1.254,637,1.254,640,1.254,641,1.254,643,3.467,644,1.254,647,1.254,648,1.254,650,1.254,651,1.254,709,2.994,734,1.651,735,1.254,736,4.686,737,3.688,738,1.481,739,1.481,740,1.481,741,1.481,742,1.481,743,1.481,744,1.481,745,1.481,746,2.086,747,1.481,748,1.481,749,1.481,750,1.481,751,1.481,752,1.481,753,1.481]],["title/modules/UsersModule.html",[0,1.643,9,1.919]],["body/modules/UsersModule.html",[0,2.385,2,1.946,3,2.572,6,2.785,7,0.026,9,3.805,10,3.035,11,2.297,12,2.297,13,0.29,14,0.29,15,0.222,17,2.523,18,0.557,19,0.656,79,0.29,80,0.062,81,0.018,82,0.018,85,2.572,170,2.641,257,2.785,258,3.709,259,4.212,261,2.523,300,3.187,413,3.545,414,3.187,432,2.523,559,3.258,658,2.523,734,3.734,754,3.187,755,3.187,756,3.187,757,3.764,758,3.764,759,3.764]],["title/injectables/UsersService.html",[170,1.332,289,0.329]],["body/injectables/UsersService.html",[7,0.026,13,0.2,14,0.2,15,0.153,18,0.464,19,0.453,61,1.306,79,0.2,80,0.043,81,0.014,82,0.014,88,0.249,89,1.008,90,2.769,91,1.866,117,0.804,119,1.339,120,0.871,121,0.677,122,1.169,124,1.477,125,2.339,146,1.584,170,1.491,187,1.147,188,1.395,189,1.711,196,0.777,197,1.74,205,2.719,209,2.045,223,2.34,251,3.007,265,1.936,289,0.368,290,0.777,303,4.006,368,3.413,394,3.277,559,2.414,577,2.571,578,2.571,579,2.571,580,2.571,610,3.056,615,1.741,617,1.741,658,1.741,660,3.247,661,2.199,663,2.34,666,3.247,668,2.199,670,3.247,672,3.247,674,3.247,676,2.199,709,3.642,746,3.247,760,2.199,761,2.597,762,2.597,763,2.597,764,2.597,765,2.597,766,2.597,767,2.597,768,2.597,769,2.597,770,3.835,771,2.597,772,2.597,773,2.597,774,2.597,775,2.597,776,2.597,777,2.597]],["title/classes/WelcomeGreetingQueue.html",[80,0.056,267,2.091]],["body/classes/WelcomeGreetingQueue.html",[7,0.025,13,0.256,14,0.256,15,0.196,18,0.451,24,2.026,26,2.226,32,2.476,79,0.256,80,0.054,81,0.016,82,0.016,88,0.319,89,1.201,91,1.466,99,1.78,103,1.208,111,2.226,117,0.778,119,1.297,120,0.843,121,0.71,122,1.132,124,1.373,187,0.993,189,1.481,197,0.993,219,2.226,220,2.56,267,2.789,287,3.409,288,3.898,321,2.476,382,1.291,433,2.476,451,3.409,778,5,779,2.812,780,4.571,781,4.571,782,5.227,783,3.321,784,5.631,785,3.321,786,4.571,787,4.571,788,6.785,789,5.227,790,3.321,791,4.571,792,5.227,793,3.321,794,4.571,795,4.571,796,3.321,797,3.321,798,3.321,799,3.321,800,3.321,801,4.571,802,4.571,803,3.321,804,3.321,805,3.321,806,3.321,807,3.321,808,3.321,809,3.321,810,3.321,811,3.321]],["title/coverage.html",[812,3.484]],["body/coverage.html",[7,0.025,15,0.174,75,1.228,80,0.105,81,0.015,82,0.015,83,2.536,84,1.979,86,2.499,98,1.979,121,0.344,138,1.979,150,1.979,170,1.147,172,1.228,176,1.801,179,1.653,181,1.979,183,1.979,251,1.526,252,1.801,253,1.801,254,1.801,255,1.801,267,1.801,289,0.636,291,2.499,353,1.653,354,2.499,381,1.801,383,2.499,384,3.139,394,1.801,395,2.499,396,3.139,413,1.653,417,2.499,418,2.499,421,2.499,437,2.499,441,2.499,453,4.153,480,2.499,482,2.499,494,2.499,508,1.801,509,2.499,510,1.979,511,2.499,515,2.499,546,2.499,555,2.499,559,1.415,560,2.499,574,1.979,575,2.499,605,1.801,612,1.653,618,1.801,622,1.979,659,2.499,663,1.801,683,2.499,690,2.201,693,2.201,695,2.499,708,2.499,709,1.801,710,2.499,716,2.499,717,2.499,721,2.499,722,2.499,734,1.979,735,2.499,760,2.499,778,2.499,779,2.499,812,2.201,813,2.952,814,2.952,815,2.952,816,3.139,817,2.499,818,7.015,819,6.049,820,4.209,821,2.499,822,2.499,823,2.952,824,2.499,825,2.499,826,4.209,827,6.293,828,5.348,829,2.952,830,5.348,831,4.905,832,4.209,833,2.952,834,2.952]],["title/dependencies.html",[3,2.13,835,2.427]],["body/dependencies.html",[3,2.064,7,0.026,19,0.696,22,2.064,24,2.436,26,2.676,29,2.676,30,2.676,32,2.978,80,0.085,81,0.019,82,0.019,128,2.436,135,2.676,164,1.552,261,2.676,263,1.914,283,2.676,321,2.978,370,3.381,392,1.661,457,4.064,486,3.381,506,3.381,569,3.381,700,3.381,836,3.993,837,3.993,838,3.993,839,3.993,840,5.733,841,3.993,842,3.993,843,5.17,844,3.993,845,3.993,846,3.993,847,3.993,848,3.993,849,3.993,850,3.993,851,3.993,852,3.993,853,3.993,854,3.993,855,3.993,856,3.993,857,3.993,858,3.993,859,3.993,860,3.993,861,3.993,862,3.993,863,3.993,864,3.993,865,3.993,866,3.993,867,3.993,868,3.993,869,3.993,870,3.993,871,3.993,872,3.993]],["title/miscellaneous/enumerations.html",[873,1.605,874,3.489]],["body/miscellaneous/enumerations.html",[7,0.025,61,1.951,81,0.021,82,0.021,88,0.451,123,3.839,128,3.494,135,3.839,220,3.207,257,3.207,363,4.55,405,2.961,873,2.631,874,3.979,875,4.699,876,4.699,877,4.699,878,4.699,879,5.727,880,4.699,881,5.727,882,4.699,883,5.727]],["title/miscellaneous/functions.html",[873,1.605,884,3.489]],["body/miscellaneous/functions.html",[7,0.023,81,0.021,82,0.021,88,0.474,119,1.136,120,0.739,121,0.574,122,0.992,284,4.178,600,3.679,690,4.399,816,3.679,817,5.342,821,4.178,822,5.342,824,4.178,873,2.763,884,4.178,885,4.934,886,4.178,887,4.934,888,4.934,889,6.537]],["title/index.html",[88,0.275,890,2.866,891,2.866]],["body/index.html",[7,0.025,15,0.301,26,2.616,34,3.304,43,4.801,45,3.304,49,2.91,81,0.018,82,0.018,95,3.798,103,1.419,128,2.381,283,2.616,334,3.798,496,3.304,567,3.304,663,3.108,812,2.91,892,3.903,893,3.903,894,3.903,895,3.903,896,3.903,897,5.094,898,3.903,899,3.903,900,3.903,901,3.903,902,3.903,903,3.903,904,3.903,905,3.903,906,5.094,907,3.903,908,6.513,909,3.903,910,3.903,911,3.903,912,3.903,913,3.903,914,3.903,915,3.903,916,6.513,917,3.903,918,3.903,919,5.094,920,3.903,921,3.903,922,3.903,923,3.903,924,3.903,925,3.903,926,3.903,927,5.094,928,3.903,929,3.903,930,3.903,931,3.903,932,5.094,933,5.094,934,3.903,935,3.903,936,3.903,937,3.903,938,3.903,939,3.903]],["title/modules.html",[2,2.415]],["body/modules.html",[1,3.405,2,2.626,6,2.844,7,0.022,8,3.099,9,2.844,81,0.022,82,0.022,940,6.599,941,6.599,942,6.599,943,6.599]],["title/overview.html",[944,3.955]],["body/overview.html",[1,4.282,2,1.738,3,2.383,4,2.846,5,2.846,6,3.886,7,0.025,8,4.039,9,3.737,10,2.812,11,2.051,12,2.051,81,0.017,82,0.017,85,1.738,170,2.483,172,2.61,247,2.846,248,2.846,250,2.846,251,3.243,252,3.209,253,3.209,254,3.209,255,3.209,290,1.006,341,2.846,353,2.945,382,1.307,413,2.945,559,3.143,612,3.512,653,2.846,654,2.846,655,2.846,693,2.507,754,2.846,755,2.846,756,2.846,944,2.846,945,3.361,946,3.361,947,3.361,948,3.361]],["title/properties.html",[355,1.499,835,2.427]],["body/properties.html",[7,0.025,81,0.022,82,0.022,106,2.919,334,3.888,355,1.896,949,5.213,950,5.213,951,5.213,952,5.213,953,5.213,954,5.213,955,5.213]],["title/miscellaneous/variables.html",[873,1.605,956,3.489]],["body/miscellaneous/variables.html",[7,0.024,75,2.09,81,0.021,82,0.021,88,0.482,362,3.996,363,3.996,405,3.287,561,4.254,622,3.996,663,3.637,816,3.746,825,4.254,873,2.813,886,4.254,956,4.254,957,5.024,958,5.024]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":950,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["0.6.2",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":828,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":948,"title":{},"body":{"overview.html":{}}}],["1.1.19",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["1.10.0",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["1.3.1",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":947,"title":{},"body":{"overview.html":{}}}],["12",{"_index":504,"title":{},"body":{"injectables/HashService.html":{}}}],["14",{"_index":946,"title":{},"body":{"overview.html":{}}}],["1h",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.0.0",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["3",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["3.0.0",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":945,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["4.10.2",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["4.6.1",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["5.1.0",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["5.2.4",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["6.0.0",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["6.8.0",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":639,"title":{},"body":{"controllers/ProductsController.html":{}}}],["7.2.0",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["accesstoken",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["account",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["adapter",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["address",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["admin",{"_index":883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["again",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["already",{"_index":435,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["any,info",{"_index":450,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["any,user",{"_index":449,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["api",{"_index":951,"title":{},"body":{"properties.html":{}}}],["apibearerauth",{"_index":611,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":393,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{}}}],["apiresponse",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('products",{"_index":626,"title":{},"body":{"controllers/ProductsController.html":{}}}],["apitags('users",{"_index":747,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":567,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":573,"title":{},"body":{"injectables/PrismaService.html":{}}}],["application",{"_index":892,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":428,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["asc",{"_index":594,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["associated",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["async",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["attempts",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["auth/auth.module",{"_index":759,"title":{},"body":{"modules/UsersModule.html":{}}}],["auth/decorators/role.decorator",{"_index":623,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth/enums/providers.enum",{"_index":459,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["auth/guards/jwt.guard",{"_index":620,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/role.guard",{"_index":619,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["auth/services/auth.service",{"_index":458,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/UserCreatedListener.html":{}}}],["authcontroller",{"_index":84,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":894,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":438,"title":{},"body":{"injectables/FacebookGuard.html":{},"injectables/GoogleGuard.html":{},"injectables/JwtGuard.html":{}}}],["authguard('facebook",{"_index":440,"title":{},"body":{"injectables/FacebookGuard.html":{}}}],["authguard('google",{"_index":481,"title":{},"body":{"injectables/GoogleGuard.html":{}}}],["authguard('jwt",{"_index":531,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":954,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":536,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authorization[0].tolowercase",{"_index":541,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authorization[1",{"_index":543,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["authservice",{"_index":172,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/UserCreatedListener.html":{},"coverage.html":{},"overview.html":{}}}],["authy",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"properties.html":{}}}],["availability",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["availability')@apioperation({summary",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["availability'})@apiresponse({status",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["availability.dto",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["availability.dto.ts",{"_index":418,"title":{},"body":{"classes/EmailAvailabilityDto.html":{},"coverage.html":{}}}],["availability.dto.ts:14",{"_index":420,"title":{},"body":{"classes/EmailAvailabilityDto.html":{}}}],["available",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["await",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["based",{"_index":893,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":506,"title":{},"body":{"injectables/HashService.html":{},"dependencies.html":{}}}],["bearer",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{}}}],["body",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":822,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":943,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":940,"title":{},"body":{"modules.html":{}}}],["bull",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"classes/WelcomeGreetingQueue.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["bullmodule.forrootasync",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{}}}],["cache",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cacheddata",{"_index":633,"title":{},"body":{"controllers/ProductsController.html":{}}}],["cachekey",{"_index":631,"title":{},"body":{"controllers/ProductsController.html":{}}}],["cacheservice",{"_index":353,"title":{"injectables/CacheService.html":{}},"body":{"injectables/CacheService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{},"overview.html":{}}}],["callback",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["callbackurl",{"_index":466,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["canactivate",{"_index":516,"title":{},"body":{"injectables/JwtGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":520,"title":{},"body":{"injectables/JwtGuard.html":{},"guards/RoleGuard.html":{}}}],["catch",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["changes",{"_index":913,"title":{},"body":{"index.html":{}}}],["check",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["class",{"_index":80,"title":{"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/IdParamValidation.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"classes/WelcomeGreetingQueue.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":382,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/IdParamValidation.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"classes/WelcomeGreetingQueue.html":{},"overview.html":{}}}],["client",{"_index":356,"title":{},"body":{"injectables/CacheService.html":{},"injectables/JwtGuard.html":{}}}],["client.headers.authorization?.split",{"_index":537,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["client:any",{"_index":535,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["clientid",{"_index":462,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":464,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":653,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_exports",{"_index":654,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_providers",{"_index":655,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":754,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":756,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":755,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compare",{"_index":495,"title":{},"body":{"injectables/HashService.html":{}}}],["compare(password1",{"_index":497,"title":{},"body":{"injectables/HashService.html":{}}}],["completed",{"_index":805,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["compodoc/compodoc",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["config/configuration",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CacheService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('app.jwtkey",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('cache.redis.host",{"_index":371,"title":{},"body":{"injectables/CacheService.html":{}}}],["configservice.get('cache.redis.port",{"_index":372,"title":{},"body":{"injectables/CacheService.html":{}}}],["configservice.get('mail.mailtrap.host",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mail.mailtrap.password",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mail.mailtrap.port",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('mail.mailtrap.username",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('queue.redis.host",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('queue.redis.post",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('services.facebook.callbackuri",{"_index":467,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["configservice.get('services.facebook.clientid",{"_index":463,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["configservice.get('services.facebook.clientsecret",{"_index":465,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["configservice.get('services.google.callbackuri",{"_index":489,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('services.google.clientid",{"_index":487,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configservice.get('services.google.clientsecret",{"_index":488,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configuration",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["console.log('error",{"_index":646,"title":{},"body":{"controllers/ProductsController.html":{}}}],["console.log('send",{"_index":806,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["console.log(`failed",{"_index":810,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["console.log(`job",{"_index":804,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["console.log(`processing",{"_index":800,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["const",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["constructor(authservice",{"_index":442,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/UserCreatedListener.html":{}}}],["constructor(configservice",{"_index":358,"title":{},"body":{"injectables/CacheService.html":{}}}],["constructor(id",{"_index":718,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["constructor(mailservice",{"_index":783,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["constructor(prisma",{"_index":661,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":433,"title":{},"body":{"injectables/EmailFilter.html":{},"guards/RoleGuard.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["constructor(reflector",{"_index":696,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(usersservice",{"_index":423,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["constructor(welcomegreetingqueue",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtGuard.html":{},"guards/RoleGuard.html":{}}}],["context.getclass",{"_index":702,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":703,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":532,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["context.switchtohttp().getrequest().user",{"_index":705,"title":{},"body":{"guards/RoleGuard.html":{}}}],["controller",{"_index":83,"title":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('products",{"_index":627,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('users",{"_index":748,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers/auth.controller",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{}}}],["controllers/products.controller",{"_index":657,"title":{},"body":{"modules/ProductsModule.html":{}}}],["controllers/users.controller",{"_index":758,"title":{},"body":{"modules/UsersModule.html":{}}}],["copy",{"_index":910,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":812,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cp",{"_index":914,"title":{},"body":{"index.html":{}}}],["create",{"_index":577,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@res",{"_index":644,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["create(createproductsdto",{"_index":664,"title":{},"body":{"injectables/ProductsService.html":{}}}],["create(createproductsdto:createproductsdto",{"_index":679,"title":{},"body":{"injectables/ProductsService.html":{}}}],["create(createusersdto",{"_index":762,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(createusersdto:createusersdto",{"_index":771,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(response",{"_index":581,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["created",{"_index":585,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["created.event",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserCreatedListener.html":{}}}],["created.event.ts",{"_index":717,"title":{},"body":{"classes/UserCreatedEvent.html":{},"coverage.html":{}}}],["created.event.ts:2",{"_index":719,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["created.listener",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{}}}],["created.listener.ts",{"_index":722,"title":{},"body":{"injectables/UserCreatedListener.html":{},"coverage.html":{}}}],["created.listener.ts:16",{"_index":727,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["created.listener.ts:8",{"_index":724,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["createproductsdto",{"_index":381,"title":{"classes/CreateProductsDto.html":{}},"body":{"classes/CreateProductsDto.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["createtoken",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(payload",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["createusersdto",{"_index":394,"title":{"classes/CreateUsersDto.html":{}},"body":{"classes/CreateUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createusersdto.password",{"_index":773,"title":{},"body":{"injectables/UsersService.html":{}}}],["credentials",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["ctx",{"_index":525,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["data",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":906,"title":{},"body":{"index.html":{}}}],["db",{"_index":922,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/IdParamValidation.html":{},"classes/LoginDto.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["decorators/match.decorator",{"_index":691,"title":{},"body":{"classes/RegisterDto.html":{}}}],["default",{"_index":362,"title":{},"body":{"injectables/CacheService.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":422,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["defaultmessage(args",{"_index":425,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["defaults",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["delete",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete('/:id",{"_index":650,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["delete('/:id')@rolesallowed(roles.admin)@apioperation({summary",{"_index":589,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["delete(@res",{"_index":651,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["delete(id",{"_index":666,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["delete(response",{"_index":587,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["deleted",{"_index":590,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":921,"title":{},"body":{"index.html":{}}}],["desc",{"_index":595,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["description",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProductsDto.html":{},"controllers/ProductsController.html":{},"classes/UpdateProductsDto.html":{},"controllers/UsersController.html":{},"properties.html":{}}}],["development",{"_index":924,"title":{},"body":{"index.html":{}}}],["dir",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":447,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["done(null",{"_index":479,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["dtos/create",{"_index":615,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/email",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/login.dto",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/register.dto",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/update",{"_index":617,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duh",{"_index":903,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":934,"title":{},"body":{"index.html":{}}}],["email",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUsersDto.html":{},"classes/WelcomeGreetingQueue.html":{},"index.html":{}}}],["email'])@apiproperty",{"_index":398,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["emailavailability",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["emailavailability(@res",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["emailavailability(response",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["emailavailabilitydto",{"_index":98,"title":{"classes/EmailAvailabilityDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/EmailAvailabilityDto.html":{},"coverage.html":{}}}],["emailfilter",{"_index":413,"title":{"injectables/EmailFilter.html":{}},"body":{"classes/CreateUsersDto.html":{},"injectables/EmailFilter.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["emails",{"_index":470,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":471,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["emitter",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/UserCreatedListener.html":{},"dependencies.html":{}}}],["enableshutdownhooks",{"_index":562,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":564,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enumerations",{"_index":874,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/roles.enum",{"_index":412,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/UpdateUsersDto.html":{},"controllers/UsersController.html":{}}}],["env",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.example",{"_index":915,"title":{},"body":{"index.html":{}}}],["envfilepath",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":448,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["error",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"classes/WelcomeGreetingQueue.html":{},"miscellaneous/enumerations.html":{}}}],["error.message",{"_index":811,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["event",{"_index":728,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["event.id",{"_index":731,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["eventemitter",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["eventemitter2",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["eventemittermodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["eventemittermodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["events/user",{"_index":730,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["example",{"_index":911,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":521,"title":{},"body":{"injectables/JwtGuard.html":{},"guards/RoleGuard.html":{}}}],["exists",{"_index":436,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["expiresin",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["exports",{"_index":258,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":439,"title":{},"body":{"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["extractjwt",{"_index":550,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":552,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FacebookStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["facebookauthcallback",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthcallback(@req",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookauthcallback(request",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookguard",{"_index":183,"title":{"injectables/FacebookGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/FacebookGuard.html":{},"coverage.html":{}}}],["facebookstrategy",{"_index":252,"title":{"injectables/FacebookStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["false",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/RoleGuard.html":{}}}],["features",{"_index":899,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"coverage.html":{},"index.html":{}}}],["filters/email.filter",{"_index":414,"title":{},"body":{"classes/CreateUsersDto.html":{},"modules/UsersModule.html":{}}}],["firstname",{"_index":472,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["forwardref",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":540,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["function",{"_index":453,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["functions",{"_index":884,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":640,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["get('/:id')@rolesallowed(roles.admin)@apioperation({summary",{"_index":743,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@rolesallowed(roles.user",{"_index":602,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get('/facebook/callback",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/facebook/callback')@useguards(facebookguard)@apioperation({summary",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback')@useguards(googleguard)@apioperation({summary",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me')@useguards(jwtguard)@apioperation({summary",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@rolesallowed(roles.admin)@apioperation({summary",{"_index":740,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@rolesallowed(roles.user",{"_index":596,"title":{},"body":{"controllers/ProductsController.html":{}}}],["get(key",{"_index":360,"title":{},"body":{"injectables/CacheService.html":{}}}],["getall",{"_index":578,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getall(query",{"_index":668,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["getall(query:object",{"_index":676,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["getall(response",{"_index":592,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["getbyid",{"_index":579,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getbyid(@res",{"_index":641,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["getbyid(id",{"_index":670,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["getbyid(response",{"_index":601,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["getbyparameter",{"_index":660,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["getbyparameter(query",{"_index":672,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":890,"title":{"index.html":{}},"body":{}}],["gettoken",{"_index":517,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["gettoken(ctx",{"_index":523,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["google",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["googleauthcallback",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(@req",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthcallback(request",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleguard",{"_index":181,"title":{"injectables/GoogleGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleGuard.html":{},"coverage.html":{}}}],["googlestrategy",{"_index":253,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["greeting",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["greeting.queue",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["greeting.queue.ts",{"_index":779,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{},"coverage.html":{}}}],["greeting.queue.ts:11",{"_index":785,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["greeting.queue.ts:15",{"_index":790,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["greeting.queue.ts:20",{"_index":793,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["greeting.queue.ts:25",{"_index":796,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["guard",{"_index":693,"title":{"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":694,"title":{},"body":{"guards/RoleGuard.html":{}}}],["guards/facebook.guard",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/google.guard",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/jwt.guard",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlebars",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["handlerequest",{"_index":518,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["handlerequest(error",{"_index":526,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["handleusercreatedevent",{"_index":723,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["handleusercreatedevent(event",{"_index":725,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["hash",{"_index":505,"title":{},"body":{"injectables/HashService.html":{}}}],["hash(password",{"_index":507,"title":{},"body":{"injectables/HashService.html":{}}}],["hashservice",{"_index":251,"title":{"injectables/HashService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["helmet",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["host",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheService.html":{}}}],["httpexception",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["httpexception('invalid",{"_index":478,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["httpstatus",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.unauthorized",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["id",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/IdParamValidation.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["idparamvalidation",{"_index":508,"title":{"classes/IdParamValidation.html":{}},"body":{"classes/IdParamValidation.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["if(!authorization",{"_index":538,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["if(cacheddata",{"_index":635,"title":{},"body":{"controllers/ProductsController.html":{}}}],["if(createusersdto.password",{"_index":772,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(ispasswordmatching",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["if(type",{"_index":376,"title":{},"body":{"injectables/CacheService.html":{}}}],["if(user",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["implements",{"_index":570,"title":{},"body":{"injectables/PrismaService.html":{},"guards/RoleGuard.html":{}}}],["import",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["imports",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":88,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":565,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["inject",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":289,"title":{"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"injectables/UserCreatedListener.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"injectables/UserCreatedListener.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/ProductsService.html":{},"injectables/UserCreatedListener.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectqueue",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectqueue('welcome",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":907,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":909,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["ioredis",{"_index":370,"title":{},"body":{"injectables/CacheService.html":{},"dependencies.html":{}}}],["isallowed",{"_index":704,"title":{},"body":{"guards/RoleGuard.html":{}}}],["isemail",{"_index":408,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUsersDto.html":{}}}],["isglobal",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":514,"title":{},"body":{"classes/IdParamValidation.html":{}}}],["isint()@isnotempty",{"_index":512,"title":{},"body":{"classes/IdParamValidation.html":{}}}],["isnotempty",{"_index":390,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/IdParamValidation.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{}}}],["isoptional",{"_index":409,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUsersDto.html":{}}}],["isoptional()@apiproperty",{"_index":406,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/UpdateUsersDto.html":{}}}],["ispasswordmatching",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HashService.html":{}}}],["isstring",{"_index":391,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{}}}],["isstring()@isnotempty()@apiproperty",{"_index":386,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{}}}],["isstring()@isnotempty()@isemail()@apiproperty",{"_index":419,"title":{},"body":{"classes/EmailAvailabilityDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUsersDto.html":{}}}],["isstring()@isnotempty()@isemail()@validate(emailfilter",{"_index":397,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@apiproperty",{"_index":557,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@apiproperty()@match('password",{"_index":688,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isoptional()@apiproperty",{"_index":403,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/UpdateUsersDto.html":{}}}],["isstring()@isoptional()@minlength(8)@apiproperty",{"_index":401,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/UpdateUsersDto.html":{}}}],["job",{"_index":788,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["job.data.id",{"_index":803,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["job.id",{"_index":801,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["job.name",{"_index":802,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["json",{"_index":365,"title":{},"body":{"injectables/CacheService.html":{}}}],["json.parse(value",{"_index":377,"title":{},"body":{"injectables/CacheService.html":{}}}],["json.stringify(value",{"_index":379,"title":{},"body":{"injectables/CacheService.html":{}}}],["jwt",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwtfromrequest",{"_index":551,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtguard",{"_index":179,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["jwtstrategy",{"_index":254,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":364,"title":{},"body":{"injectables/CacheService.html":{}}}],["lastname",{"_index":474,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["later",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["later'})@apiresponse({status",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["length",{"_index":502,"title":{},"body":{"injectables/HashService.html":{}}}],["license",{"_index":952,"title":{},"body":{"properties.html":{}}}],["licensed",{"_index":939,"title":{},"body":{"index.html":{}}}],["load",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["login'})@apiresponse({status",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@res",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(google",{"_index":898,"title":{},"body":{"index.html":{}}}],["login(password",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(response",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":138,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.email",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail",{"_index":807,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["mailermodule",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forrootasync",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["mailerservice",{"_index":784,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["mailservice",{"_index":786,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["main",{"_index":817,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["make",{"_index":496,"title":{},"body":{"injectables/HashService.html":{},"index.html":{}}}],["make(password",{"_index":501,"title":{},"body":{"injectables/HashService.html":{}}}],["match",{"_index":690,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["match('password",{"_index":692,"title":{},"body":{"classes/RegisterDto.html":{}}}],["match(property",{"_index":888,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matching",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["me'})@apiresponse({status",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(@req",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(request",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["message",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtGuard.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["metadata",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["migrate",{"_index":920,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":917,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":410,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUsersDto.html":{}}}],["minlength(8",{"_index":416,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUsersDto.html":{}}}],["miscellaneous",{"_index":873,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":938,"title":{},"body":{"index.html":{}}}],["mode",{"_index":927,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/mailer",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/WelcomeGreetingQueue.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/products/products.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/shared/mail/templates",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/queues/welcome",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/users/services/users.service",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/users/users.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["morgan",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["nadeera",{"_index":955,"title":{},"body":{"properties.html":{}}}],["name",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"miscellaneous/functions.html":{}}}],["name.familyname",{"_index":475,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["name.givenname",{"_index":473,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["native",{"_index":879,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["nest",{"_index":937,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"classes/WelcomeGreetingQueue.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/bull",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/WelcomeGreetingQueue.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CacheService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":700,"title":{},"body":{"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/UserCreatedListener.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/LoginDto.html":{},"controllers/ProductsController.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["nodemailer",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["noreply@authy.com",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["notification",{"_index":901,"title":{},"body":{"index.html":{}}}],["npm",{"_index":908,"title":{},"body":{"index.html":{}}}],["npx",{"_index":919,"title":{},"body":{"index.html":{}}}],["null",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["number",{"_index":368,"title":{},"body":{"injectables/CacheService.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/ProductsService.html":{},"classes/UserCreatedEvent.html":{},"injectables/UsersService.html":{}}}],["oauth20",{"_index":486,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["onactive",{"_index":780,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["onactive(job",{"_index":787,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["oncompleted",{"_index":781,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["oncompleted(job",{"_index":791,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["onevent",{"_index":729,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["onevent('user.created",{"_index":726,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["onmoduleinit",{"_index":563,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onqueueactive",{"_index":789,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["onqueuecompleted",{"_index":792,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["optional",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateUsersDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{}}}],["orderby",{"_index":593,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["out",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":944,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":835,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":510,"title":{},"body":{"classes/IdParamValidation.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["parameters",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"miscellaneous/functions.html":{}}}],["parsetoken",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsetoken(token",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsetoken(token:any",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["pass",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["passport",{"_index":457,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":455,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":460,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUsersDto.html":{},"injectables/HashService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUsersDto.html":{}}}],["password1",{"_index":500,"title":{},"body":{"injectables/HashService.html":{}}}],["password2",{"_index":498,"title":{},"body":{"injectables/HashService.html":{}}}],["password_confirmation",{"_index":684,"title":{},"body":{"classes/RegisterDto.html":{}}}],["path",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["path.join",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.firstname",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.id",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.lastname",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["photos",{"_index":490,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["photos[0].value",{"_index":492,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["picture",{"_index":491,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["please",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["port",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheService.html":{}}}],["post",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["post('/email",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login')@apioperation({summary",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register')@apioperation({summary",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@rolesallowed(roles.admin)@apioperation({summary",{"_index":582,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["postgres",{"_index":905,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":385,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/UpdateProductsDto.html":{}}}],["prisma",{"_index":663,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["prisma/.../seed.ts",{"_index":886,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prisma/client",{"_index":569,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/seed.ts",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["prismaclient",{"_index":561,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["prismaservice",{"_index":559,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/PrismaService.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":798,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["process('send",{"_index":795,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["process.env.init_cwd",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["processor",{"_index":797,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["processor('welcome",{"_index":799,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["product",{"_index":584,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["product'})@apiresponse({status",{"_index":583,"title":{},"body":{"controllers/ProductsController.html":{}}}],["product:getall",{"_index":632,"title":{},"body":{"controllers/ProductsController.html":{}}}],["production",{"_index":929,"title":{},"body":{"index.html":{}}}],["products",{"_index":576,"title":{},"body":{"controllers/ProductsController.html":{}}}],["products'})@apiresponse({status",{"_index":598,"title":{},"body":{"controllers/ProductsController.html":{}}}],["products.dto",{"_index":616,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{}}}],["products.dto.ts",{"_index":384,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/UpdateProductsDto.html":{},"coverage.html":{}}}],["products.dto.ts:11",{"_index":388,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/UpdateProductsDto.html":{}}}],["products.dto.ts:16",{"_index":389,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/UpdateProductsDto.html":{}}}],["products.dto.ts:21",{"_index":387,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/UpdateProductsDto.html":{}}}],["productscontroller",{"_index":574,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":8,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsservice",{"_index":612,"title":{"injectables/ProductsService.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"coverage.html":{},"overview.html":{}}}],["profile",{"_index":446,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profilefields",{"_index":469,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["promise",{"_index":454,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"guards/RoleGuard.html":{}}}],["properties",{"_index":355,"title":{"properties.html":{}},"body":{"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"classes/IdParamValidation.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"properties.html":{}}}],["property",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/functions.html":{}}}],["provided",{"_index":544,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["provider",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUsersDto.html":{},"classes/UpdateUsersDto.html":{}}}],["providers",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{}}}],["providers.facebook",{"_index":477,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["providers.google",{"_index":493,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["public",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UserCreatedEvent.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["put",{"_index":609,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["put('/:id",{"_index":647,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["put('/:id')@rolesallowed(roles.admin)@apioperation({summary",{"_index":606,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["query",{"_index":610,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query('orderby",{"_index":630,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["queue",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["queues",{"_index":904,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailFilter.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["redis",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/CacheService.html":{},"index.html":{}}}],["redis(options",{"_index":374,"title":{},"body":{"injectables/CacheService.html":{}}}],["reflect",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":697,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refreshtoken",{"_index":445,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["register",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["register'})@apiresponse({status",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@res",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(response",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":150,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registerdto.password_confirmation",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":900,"title":{},"body":{"index.html":{}}}],["reply",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["req",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"guards/RoleGuard.html":{}}}],["request.role",{"_index":707,"title":{},"body":{"guards/RoleGuard.html":{}}}],["request.user.email",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user.id",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user.name",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user.role",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":912,"title":{},"body":{"index.html":{}}}],["res",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["response.status(httpstatus.bad_request).json",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["response.status(httpstatus.ok).json",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["responsetype",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["responsetype.error",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["responsetype.success",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"guards/RoleGuard.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["rimraf",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUsersDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateUsersDto.html":{}}}],["roleguard",{"_index":618,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/ProductsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["roles",{"_index":405,"title":{},"body":{"classes/CreateUsersDto.html":{},"controllers/ProductsController.html":{},"guards/RoleGuard.html":{},"classes/UpdateUsersDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles.admin",{"_index":629,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles.admin)@apioperation({summary",{"_index":597,"title":{},"body":{"controllers/ProductsController.html":{}}}],["roles.foreach((role",{"_index":706,"title":{},"body":{"guards/RoleGuard.html":{}}}],["rolesallowed",{"_index":622,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesallowed(roles.admin",{"_index":643,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["rolesallowed(roles.user",{"_index":628,"title":{},"body":{"controllers/ProductsController.html":{}}}],["run",{"_index":916,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["scope",{"_index":468,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["secret",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":553,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["seed",{"_index":923,"title":{},"body":{"index.html":{}}}],["seeds",{"_index":918,"title":{},"body":{"index.html":{}}}],["send",{"_index":782,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["send(job",{"_index":794,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["sendwelcomegreeting",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendwelcomegreeting(user",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["services/auth.service",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["services/products.service",{"_index":613,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["services/users.service",{"_index":432,"title":{},"body":{"injectables/EmailFilter.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["session",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{}}}],["set",{"_index":357,"title":{},"body":{"injectables/CacheService.html":{}}}],["set(key",{"_index":366,"title":{},"body":{"injectables/CacheService.html":{}}}],["setmetadata('roles",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["social",{"_index":897,"title":{},"body":{"index.html":{}}}],["something",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["source",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookGuard.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleGuard.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["src/.../main.ts",{"_index":885,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../match.decorator.ts",{"_index":887,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../providers.enum.ts",{"_index":875,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../response.enum.ts",{"_index":876,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.decorator.ts",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":877,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":821,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/app/app.module.ts",{"_index":16,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/controllers/auth.controller.ts",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/controllers/auth.controller.ts:119",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/controllers/auth.controller.ts:158",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/controllers/auth.controller.ts:184",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/controllers/auth.controller.ts:207",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/controllers/auth.controller.ts:36",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/controllers/auth.controller.ts:83",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/decorators/match.decorator.ts",{"_index":824,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/auth/decorators/role.decorator.ts",{"_index":825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dtos/email",{"_index":417,"title":{},"body":{"classes/EmailAvailabilityDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts",{"_index":555,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/login.dto.ts:15",{"_index":556,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/login.dto.ts:21",{"_index":558,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/modules/auth/dtos/register.dto.ts",{"_index":683,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/modules/auth/dtos/register.dto.ts:15",{"_index":686,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/modules/auth/dtos/register.dto.ts:21",{"_index":685,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/modules/auth/dtos/register.dto.ts:27",{"_index":687,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/modules/auth/dtos/register.dto.ts:34",{"_index":689,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/modules/auth/enums/providers.enum.ts",{"_index":878,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/auth/guards/facebook.guard.ts",{"_index":437,"title":{},"body":{"injectables/FacebookGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/google.guard.ts",{"_index":480,"title":{},"body":{"injectables/GoogleGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts",{"_index":515,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:13",{"_index":527,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:20",{"_index":524,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:39",{"_index":529,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["src/modules/auth/guards/jwt.guard.ts:7",{"_index":522,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["src/modules/auth/guards/role.guard.ts",{"_index":695,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/modules/auth/guards/role.guard.ts:6",{"_index":698,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/modules/auth/guards/role.guard.ts:9",{"_index":699,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/modules/auth/services/auth.service.ts",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/services/auth.service.ts:10",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/services/auth.service.ts:19",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/services/auth.service.ts:27",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/services/auth.service.ts:35",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/services/auth.service.ts:39",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/services/auth.service.ts:56",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/services/auth.service.ts:67",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/services/auth.service.ts:80",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/strategies/facebook.strategy.ts",{"_index":441,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/facebook.strategy.ts:23",{"_index":452,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/strategies/facebook.strategy.ts:9",{"_index":443,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/strategies/google.strategy.ts",{"_index":482,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/google.strategy.ts:21",{"_index":485,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategies/google.strategy.ts:9",{"_index":483,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts",{"_index":546,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:19",{"_index":549,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/strategies/jwt.strategy.ts:8",{"_index":547,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/products/controllers/products.controller.ts",{"_index":575,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/modules/products/controllers/products.controller.ts:106",{"_index":586,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products.controller.ts:135",{"_index":608,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products.controller.ts:163",{"_index":591,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products.controller.ts:37",{"_index":599,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/controllers/products.controller.ts:78",{"_index":603,"title":{},"body":{"controllers/ProductsController.html":{}}}],["src/modules/products/dtos/create",{"_index":383,"title":{},"body":{"classes/CreateProductsDto.html":{},"coverage.html":{}}}],["src/modules/products/dtos/update",{"_index":708,"title":{},"body":{"classes/UpdateProductsDto.html":{},"coverage.html":{}}}],["src/modules/products/products.module.ts",{"_index":656,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/modules/products/services/products.service.ts",{"_index":659,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["src/modules/products/services/products.service.ts:13",{"_index":669,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products.service.ts:17",{"_index":671,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products.service.ts:21",{"_index":673,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products.service.ts:25",{"_index":665,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products.service.ts:31",{"_index":675,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products.service.ts:40",{"_index":667,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/products/services/products.service.ts:8",{"_index":662,"title":{},"body":{"injectables/ProductsService.html":{}}}],["src/modules/users/controllers/users.controller.ts",{"_index":735,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/controllers/users.controller.ts:122",{"_index":745,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:150",{"_index":739,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:35",{"_index":742,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:66",{"_index":744,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/controllers/users.controller.ts:94",{"_index":738,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/dtos/create",{"_index":395,"title":{},"body":{"classes/CreateUsersDto.html":{},"coverage.html":{}}}],["src/modules/users/dtos/update",{"_index":710,"title":{},"body":{"classes/UpdateUsersDto.html":{},"coverage.html":{}}}],["src/modules/users/enums/roles.enum.ts",{"_index":882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/users/events/user",{"_index":716,"title":{},"body":{"classes/UserCreatedEvent.html":{},"coverage.html":{}}}],["src/modules/users/filters/email.filter.ts",{"_index":421,"title":{},"body":{"injectables/EmailFilter.html":{},"coverage.html":{}}}],["src/modules/users/filters/email.filter.ts:10",{"_index":430,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["src/modules/users/filters/email.filter.ts:16",{"_index":427,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["src/modules/users/filters/email.filter.ts:7",{"_index":424,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["src/modules/users/listeners/user",{"_index":721,"title":{},"body":{"injectables/UserCreatedListener.html":{},"coverage.html":{}}}],["src/modules/users/queues/welcome",{"_index":778,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts",{"_index":760,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/services/users.service.ts:15",{"_index":765,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:19",{"_index":766,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:23",{"_index":767,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:27",{"_index":763,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:35",{"_index":768,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:44",{"_index":764,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/services/users.service.ts:9",{"_index":761,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/modules/users/users.module.ts",{"_index":757,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/util/decorators/id",{"_index":509,"title":{},"body":{"classes/IdParamValidation.html":{},"coverage.html":{}}}],["src/modules/util/enums/response.enum.ts",{"_index":880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/modules/util/mail/templates",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["src/modules/util/services/cache.service.ts",{"_index":354,"title":{},"body":{"injectables/CacheService.html":{},"coverage.html":{}}}],["src/modules/util/services/cache.service.ts:18",{"_index":361,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/modules/util/services/cache.service.ts:26",{"_index":369,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/modules/util/services/cache.service.ts:8",{"_index":359,"title":{},"body":{"injectables/CacheService.html":{}}}],["src/modules/util/services/hash.service.ts",{"_index":494,"title":{},"body":{"injectables/HashService.html":{},"coverage.html":{}}}],["src/modules/util/services/hash.service.ts:11",{"_index":499,"title":{},"body":{"injectables/HashService.html":{}}}],["src/modules/util/services/hash.service.ts:7",{"_index":503,"title":{},"body":{"injectables/HashService.html":{}}}],["src/modules/util/services/prisma.service.ts",{"_index":560,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/modules/util/services/prisma.service.ts:10",{"_index":566,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/modules/util/services/prisma.service.ts:6",{"_index":568,"title":{},"body":{"injectables/PrismaService.html":{}}}],["start",{"_index":925,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":928,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":930,"title":{},"body":{"index.html":{}}}],["started",{"_index":891,"title":{"index.html":{}},"body":{}}],["statements",{"_index":815,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["strategies/facebook.strategy",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/google.strategy",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":456,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["strict",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"injectables/JwtGuard.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{}}}],["subject",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["successfully",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":461,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":534,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["support",{"_index":941,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":896,"title":{},"body":{"index.html":{}}}],["svg",{"_index":942,"title":{},"body":{"modules.html":{}}}],["syncsocialauth",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["syncsocialauth(payload",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["system",{"_index":895,"title":{},"body":{"index.html":{}}}],["table",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["tech",{"_index":902,"title":{},"body":{"index.html":{}}}],["template",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["test",{"_index":933,"title":{},"body":{"index.html":{}}}],["test:covlicense",{"_index":936,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":935,"title":{},"body":{"index.html":{}}}],["tests",{"_index":932,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":571,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":572,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.createtoken(payload",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto.password",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendwelcomegreeting(user",{"_index":733,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["this.authservice.syncsocialauth(request.user",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatebasicauthuser(payload",{"_index":554,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validatesocialauthuser(payload",{"_index":476,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["this.cacheservice.get(cachekey",{"_index":634,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.cacheservice.set(cachekey",{"_index":638,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.client",{"_index":373,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.client.get(key",{"_index":375,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.client.setex(key",{"_index":380,"title":{},"body":{"injectables/CacheService.html":{}}}],["this.createtoken(token",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.eventemitter.emit('user.created",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.gettoken(context",{"_index":533,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["this.hashservice.compare",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashservice.make(createusersdto.password",{"_index":774,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.id",{"_index":720,"title":{},"body":{"classes/UserCreatedEvent.html":{}}}],["this.jwtservice.decode(token",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailservice.sendmail(job.data",{"_index":809,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["this.prisma.product.create({data",{"_index":680,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.product.delete",{"_index":682,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.product.findfirst({where",{"_index":678,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.product.findmany(query",{"_index":677,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.product.update",{"_index":681,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.prisma.user.create({data",{"_index":775,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.delete",{"_index":777,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findfirst({where",{"_index":770,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findmany(query",{"_index":769,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":776,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.productsservice.create(createproductsdto",{"_index":645,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.delete(id",{"_index":652,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getall",{"_index":636,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.getbyid(id",{"_index":642,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.productsservice.update(id",{"_index":649,"title":{},"body":{"controllers/ProductsController.html":{}}}],["this.reflector.getallandmerge('roles",{"_index":701,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.throwexception(ctx",{"_index":539,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["this.usersservice.create",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createusersdto",{"_index":751,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(registerdto",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.delete(id",{"_index":753,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getall",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(id",{"_index":750,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyid(payload.id",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getbyparameter",{"_index":434,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["this.usersservice.getbyparameter({email",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["this.usersservice.getbyparameter({email:emailavailabilitydto.email",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.getbyparameter({id",{"_index":732,"title":{},"body":{"injectables/UserCreatedListener.html":{}}}],["this.usersservice.update(id",{"_index":752,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.welcomegreetingqueue.add('send",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{}}}],["throwexception",{"_index":519,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["throwexception(ctx",{"_index":528,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["time",{"_index":367,"title":{},"body":{"injectables/CacheService.html":{}}}],["time:number",{"_index":378,"title":{},"body":{"injectables/CacheService.html":{}}}],["token",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{}}}],["transformer",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["trigered",{"_index":808,"title":{},"body":{"classes/WelcomeGreetingQueue.html":{}}}],["true",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/EmailFilter.html":{},"guards/RoleGuard.html":{}}}],["try",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["type",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/HashService.html":{},"classes/IdParamValidation.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/RegisterDto.html":{},"guards/RoleGuard.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/WelcomeGreetingQueue.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["unauthorizedexception",{"_index":530,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["unauthorizedexception(message",{"_index":545,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["undefined",{"_index":588,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["unit",{"_index":931,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CacheService.html":{},"injectables/EmailFilter.html":{},"injectables/HashService.html":{},"injectables/JwtStrategy.html":{},"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":953,"title":{},"body":{"properties.html":{}}}],["update",{"_index":580,"title":{},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@res",{"_index":648,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["update(id",{"_index":674,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/UsersService.html":{}}}],["update(response",{"_index":604,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["updated",{"_index":607,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["updatedat",{"_index":637,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["updateproductsdto",{"_index":605,"title":{"classes/UpdateProductsDto.html":{}},"body":{"controllers/ProductsController.html":{},"injectables/ProductsService.html":{},"classes/UpdateProductsDto.html":{},"coverage.html":{}}}],["updateusersdto",{"_index":709,"title":{"classes/UpdateUsersDto.html":{}},"body":{"classes/UpdateUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["url",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["url'})@apiresponse({status",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["usefactory",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["useguards(facebookguard",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(googleguard",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtguard",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiresponse({status",{"_index":737,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.email",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.name",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreatedevent",{"_index":176,"title":{"classes/UserCreatedEvent.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserCreatedEvent.html":{},"injectables/UserCreatedListener.html":{},"coverage.html":{}}}],["usercreatedevent(user.id",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["usercreatedlistener",{"_index":255,"title":{"injectables/UserCreatedListener.html":{}},"body":{"modules/AuthModule.html":{},"injectables/UserCreatedListener.html":{},"coverage.html":{},"overview.html":{}}}],["username",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":736,"title":{},"body":{"controllers/UsersController.html":{}}}],["users'})@apiresponse({status",{"_index":741,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.dto",{"_index":746,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":396,"title":{},"body":{"classes/CreateUsersDto.html":{},"classes/UpdateUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:15",{"_index":712,"title":{},"body":{"classes/UpdateUsersDto.html":{}}}],["users.dto.ts:17",{"_index":400,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["users.dto.ts:21",{"_index":711,"title":{},"body":{"classes/UpdateUsersDto.html":{}}}],["users.dto.ts:24",{"_index":399,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["users.dto.ts:27",{"_index":713,"title":{},"body":{"classes/UpdateUsersDto.html":{}}}],["users.dto.ts:30",{"_index":402,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["users.dto.ts:31",{"_index":715,"title":{},"body":{"classes/UpdateUsersDto.html":{}}}],["users.dto.ts:34",{"_index":407,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["users.dto.ts:36",{"_index":714,"title":{},"body":{"classes/UpdateUsersDto.html":{}}}],["users.dto.ts:39",{"_index":404,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["users/enums/roles.enum",{"_index":621,"title":{},"body":{"controllers/ProductsController.html":{},"guards/RoleGuard.html":{}}}],["users/events/user",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["users/listeners/user",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/services/users.service",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userscontroller",{"_index":734,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":9,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":170,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailFilter.html":{},"injectables/UserCreatedListener.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["util/decorators/id",{"_index":624,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["util/enums/response.enum",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["util/services/cache.service",{"_index":614,"title":{},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{}}}],["util/services/hash.service",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["util/services/prisma.service",{"_index":658,"title":{},"body":{"modules/ProductsModule.html":{},"injectables/ProductsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["valid",{"_index":542,"title":{},"body":{"injectables/JwtGuard.html":{}}}],["validate",{"_index":411,"title":{},"body":{"classes/CreateUsersDto.html":{},"injectables/EmailFilter.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["validate(accesstoken",{"_index":444,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["validate(email",{"_index":429,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["validate(emailfilter",{"_index":415,"title":{},"body":{"classes/CreateUsersDto.html":{}}}],["validate(payload",{"_index":548,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatebasicauthuser",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatebasicauthuser(payload",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatesocialauthuser",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatesocialauthuser(payload",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation.decorator",{"_index":625,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["validation.decorator.ts",{"_index":511,"title":{},"body":{"classes/IdParamValidation.html":{},"coverage.html":{}}}],["validation.decorator.ts:6",{"_index":513,"title":{},"body":{"classes/IdParamValidation.html":{}}}],["validationarguments",{"_index":426,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["validationoptions",{"_index":889,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":392,"title":{},"body":{"classes/CreateProductsDto.html":{},"classes/CreateUsersDto.html":{},"classes/EmailAvailabilityDto.html":{},"injectables/EmailFilter.html":{},"classes/IdParamValidation.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProductsDto.html":{},"classes/UpdateUsersDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":431,"title":{},"body":{"injectables/EmailFilter.html":{}}}],["value",{"_index":363,"title":{},"body":{"injectables/CacheService.html":{},"injectables/HashService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":956,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifycallback",{"_index":484,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["version",{"_index":949,"title":{},"body":{"properties.html":{}}}],["void",{"_index":451,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/JwtGuard.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["watch",{"_index":926,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/WelcomeGreetingQueue.html":{}}}],["welcomegreetingqueue",{"_index":267,"title":{"classes/WelcomeGreetingQueue.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/WelcomeGreetingQueue.html":{},"coverage.html":{}}}],["went",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["wrong",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProductsController.html":{},"controllers/UsersController.html":{}}}],["www.authy.com",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["yes",{"_index":600,"title":{},"body":{"controllers/ProductsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["zoom",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ProductsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { BullModule } from '@nestjs/bull';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { EventEmitterModule } from '@nestjs/event-emitter';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport * as path from 'path';\n\nimport configuration from '../../config/configuration';\nimport { AuthModule } from '../../modules/auth/auth.module';\nimport { UsersModule } from '../../modules/users/users.module';\nimport { ProductsModule } from '../../modules/products/products.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: ['.env'],\n      load: [configuration],\n      cache: false,\n    }),\n    BullModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('queue.redis.host'),\n          port: configService.get('queue.redis.post'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    MailerModule.forRootAsync({\n      useFactory: (configService: ConfigService) => ({\n        transport: {\n          host: configService.get('mail.mailtrap.host'),\n          port: configService.get('mail.mailtrap.port'),\n          secure: false,\n          auth:{\n            user: configService.get('mail.mailtrap.username'),\n            pass: configService.get('mail.mailtrap.password'),\n          }\n        },\n        defaults: {\n          from: '\"no-reply\" ',\n        },\n        template: {\n          dir: path.join(\n            process.env.INIT_CWD,\n            'src/modules/util/mail/templates',\n          ),\n          //dir: __dirname + '/modules/shared/mail/templates/',\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        }\n      }),\n      inject: [ConfigService],\n    }),\n    EventEmitterModule.forRoot(),\n    AuthModule,\n    UsersModule,\n    ProductsModule\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/controllers/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                emailAvailability\n                            \n                            \n                                    Public\n                                    Async\n                                facebookAuthCallback\n                            \n                            \n                                    Public\n                                    Async\n                                googleAuthCallback\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                me\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        emailAvailability\n                        \n                    \n                \n            \n            \n                \n                    \n                    emailAvailability(response, emailAvailabilityDto: EmailAvailabilityDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/email-availability')@ApiOperation({summary: 'Check email availability'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'This email address is  available'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/controllers/auth.controller.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emailAvailabilityDto\n                                    \n                                                EmailAvailabilityDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        facebookAuthCallback\n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookAuthCallback(request, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/facebook/callback')@UseGuards(FacebookGuard)@ApiOperation({summary: 'Facebook callback URL'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: ''})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/controllers/auth.controller.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        googleAuthCallback\n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuthCallback(request, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google/callback')@UseGuards(GoogleGuard)@ApiOperation({summary: 'Google callback URL'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: ''})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/controllers/auth.controller.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(response, loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@ApiOperation({summary: 'Auth login'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'Login successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/controllers/auth.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                    \n                    me(request, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(JwtGuard)@ApiOperation({summary: 'Me'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'User data been successfully fetched successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/controllers/auth.controller.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response, registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')@ApiOperation({summary: 'Auth register'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'You have been successfully registered'})\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/controllers/auth.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    registerDto\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, HttpStatus, Post, Req, Res, UseGuards } from \"@nestjs/common\";\nimport { ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\nimport { LoginDto } from \"../dtos/login.dto\";\nimport { RegisterDto } from \"../dtos/register.dto\";\nimport { EmailAvailabilityDto } from \"../dtos/email-availability.dto\";\nimport { UsersService } from '../../users/services/users.service';\nimport { AuthService } from '../services/auth.service';\nimport { Response as ResponseType  } from '../../util/enums/response.enum';\nimport { UserCreatedEvent } from '../../users/events/user-created.event';\nimport JwtGuard from \"../guards/jwt.guard\";\nimport {GoogleGuard} from \"../guards/google.guard\";\nimport {FacebookGuard} from \"../guards/facebook.guard\";\n\n@ApiTags('Auth')\n@Controller('auth')\nexport class AuthController {\n\n    constructor(\n      private readonly usersService : UsersService,\n      private readonly authService : AuthService,\n      private eventEmitter: EventEmitter2,\n    ){}\n\n    @Post('/login')\n    @ApiOperation({ summary: 'Auth login' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Login successfully',\n    })\n    public async login(@Res() response, @Body() loginDto: LoginDto){        \n        try {\n          const user = await this.usersService.getByParameter({email: loginDto.email});\n          if(user){\n            const isPasswordMatching = await this.authService.login(loginDto.password, user);\n            if(isPasswordMatching){\n              const payload = {\n                id: user.id\n              };\n              const token = await this.authService.createToken(payload);\n              return response.status(HttpStatus.OK).json({\n                type: ResponseType.SUCCESS,\n                message: 'Login successfully',\n                data: token,\n              });\n            }else{\n              return response.status(HttpStatus.BAD_REQUEST).json({\n                type: ResponseType.ERROR,\n                message: 'Invalid credentials',\n                data: null,\n              });\n            }           \n          }\n          return response.status(HttpStatus.BAD_REQUEST).json({\n            type: ResponseType.ERROR,\n            message: 'There is no user associated with this email',\n            data: null,\n          });\n        } catch (error) {\n          return response.status(HttpStatus.BAD_REQUEST).json({\n            type: ResponseType.ERROR,\n            message: 'Something went wrong, Please try again later',\n            data: null,\n          });\n        }  \n    }   \n\n    @Post('/register')\n    @ApiOperation({ summary: 'Auth register' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'You have been successfully registered',\n    })\n    public async register(@Res() response, @Body() registerDto: RegisterDto){\n        try {\n            delete registerDto.password_confirmation;\n            const user = await this.usersService.create(registerDto);\n            if(user){\n              const payload = {\n                id: user.id\n              };\n              const token = await this.authService.createToken(payload);\n              const userCreatedEvent = new UserCreatedEvent(user.id);\n              this.eventEmitter.emit('user.created', userCreatedEvent);\n              return response.status(HttpStatus.OK).json({\n                type: ResponseType.SUCCESS,\n                message: 'You have been successfully registered',\n                data: token,\n              });\n            }\n        } catch (error) {\n          return response.status(HttpStatus.BAD_REQUEST).json({\n            type: ResponseType.ERROR,\n            message: 'Something went wrong, Please try again later',\n            data: null,\n          });\n        }\n    }\n\n    @Post('/email-availability')                          \n    @ApiOperation({ summary: 'Check email availability' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'This email address is  available',\n    })\n    public async emailAvailability(@Res() response, @Body() emailAvailabilityDto: EmailAvailabilityDto){\n      try {\n        const user = await this.usersService.getByParameter({email:emailAvailabilityDto.email});\n        if(user){\n          return response.status(HttpStatus.OK).json({\n            type: ResponseType.SUCCESS,\n            message: 'This email address is not available',\n            data : {\n              availability :  false\n            }\n          });\n        }\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'This email address is  available',\n          data : {\n            availability :  true\n          }\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }\n\n    @Get('/me')\n    @UseGuards(JwtGuard)\n    @ApiOperation({ summary: 'Me' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'User data been successfully fetched successfully',\n    })\n    public async me(@Req() request, @Res() response){\n        const user = {\n          id: request.user.id,\n          name: request.user.name,\n          email: request.user.email,\n          role: request.user.role\n        };\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'You have been successfully registered',\n          data: user,\n        });\n    }\n\n  \n  @Get('/google/callback')\n  @UseGuards(GoogleGuard)\n  @ApiOperation({ summary: 'Google callback URL' })\n  @ApiResponse({\n    status: 400,\n    description: 'Something went wrong, Please try again later',\n  })\n  @ApiResponse({\n    status: 200,\n    description: '',\n  })\n  public async googleAuthCallback(@Req() request, @Res() response) {\n    try {\n       return this.authService.syncSocialAuth(request.user);\n    } catch (error) {\n      return response.status(HttpStatus.BAD_REQUEST).json({\n        type: ResponseType.ERROR,\n        message: 'Something went wrong, Please try again later',\n        data: null,\n      });\n    }\n  }\n\n  @Get('/facebook/callback')\n  @UseGuards(FacebookGuard)\n  @ApiOperation({ summary: 'Facebook callback URL' })\n  @ApiResponse({\n    status: 400,\n    description: 'Something went wrong, Please try again later',\n  })\n  @ApiResponse({\n    status: 200,\n    description: '',\n  })\n  public async facebookAuthCallback(@Req() request, @Res() response) {\n    try {\n      return this.authService.syncSocialAuth(request.user);\n    } catch (error) {\n      return response.status(HttpStatus.BAD_REQUEST).json({\n        type: ResponseType.ERROR,\n        message: 'Something went wrong, Please try again later',\n        data: null,\n      });\n    }\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashService \n\nHashService \n\nHashService  -->\n\nAuthModule->HashService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nHashService\n\nHashService\n\nAuthModule -->\n\nHashService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserCreatedListener\n\nUserCreatedListener\n\nAuthModule -->\n\nUserCreatedListener->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            HashService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UserCreatedListener\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {forwardRef, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportModule } from '@nestjs/passport';\nimport { BullModule } from '@nestjs/bull';\n\nimport { AuthService } from './services/auth.service';\nimport { AuthController } from './controllers/auth.controller';\nimport { HashService } from '../util/services/hash.service';\nimport { UsersModule } from '../../modules/users/users.module';\nimport { UsersService } from '../../modules/users/services/users.service';\nimport { WelcomeGreetingQueue } from '../../modules/users/queues/welcome-greeting.queue'\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { FacebookStrategy } from './strategies/facebook.strategy';\nimport { UserCreatedListener } from '../users/listeners/user-created.listener';\n\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('app.jwtkey'),\n        signOptions: {\n          expiresIn: '1h',\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n      property: 'user',\n      session: false,\n    }),\n    BullModule.registerQueue(\n      {\n        name: 'welcome-greeting',\n      },\n    ),\n    UsersModule,\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    HashService,\n    UsersService,\n    JwtStrategy,\n    GoogleStrategy,\n    FacebookStrategy,\n    WelcomeGreetingQueue,\n    UserCreatedListener\n  ],\n  exports: [HashService, AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/services/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createToken\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                parseToken\n                            \n                            \n                                    Public\n                                    Async\n                                sendWelcomeGreeting\n                            \n                            \n                                    Public\n                                    Async\n                                syncSocialAuth\n                            \n                            \n                                    Public\n                                    Async\n                                validateBasicAuthUser\n                            \n                            \n                                    Public\n                                    Async\n                                validateSocialAuthUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(welcomeGreetingQueue: Queue, jwtService: JwtService, hashService: HashService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/services/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        welcomeGreetingQueue\n                                                  \n                                                        \n                                                                    Queue\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(payload: object)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/services/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(password: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/services/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        parseToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    parseToken(token: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/services/auth.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendWelcomeGreeting\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendWelcomeGreeting(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/services/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        syncSocialAuth\n                        \n                    \n                \n            \n            \n                \n                    \n                    syncSocialAuth(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/services/auth.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateBasicAuthUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateBasicAuthUser(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/services/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateSocialAuthUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateSocialAuthUser(payload: any, type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/services/auth.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { InjectQueue } from \"@nestjs/bull\";\nimport { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { JwtService } from '@nestjs/jwt';\nimport { Queue } from \"bull\";\n\nimport { HashService } from \"../../util/services/hash.service\";\nimport { UsersService } from \"../../users/services/users.service\";\n\n@Injectable()\nexport class AuthService {\n\n    constructor(\n        @InjectQueue('welcome-greeting') private welcomeGreetingQueue: Queue,\n        private readonly jwtService: JwtService,\n        private readonly hashService: HashService,\n        private readonly usersService: UsersService,\n    ) {}\n\n    public async login(password: string, user: any) {\n        const isPasswordMatching = await this.hashService.compare(\n            password,\n            user.password,\n        );\n        return isPasswordMatching;\n    }\n\n    public async createToken(payload: object) {\n        const accessToken = await this.jwtService.sign(payload);\n        return {\n          type: 'Bearer',\n          accessToken : accessToken\n        };\n    }\n\n    public async parseToken(token:any){\n      return this.jwtService.decode(token);\n    }\n\n    public async sendWelcomeGreeting(user: any) {\n        const url = 'www.authy.com';\n        const options = {\n          to: user.email,\n          from: 'noreply@authy.com',\n          subject: 'Welcome to Authy',\n          template: 'new-account',\n          context: {\n            url: url,\n            username: user.name,\n          },\n        };\n        await this.welcomeGreetingQueue.add('send-welcome-greeting', options, {\n          attempts: 3,\n        });\n    }\n    \n    public async validateBasicAuthUser(payload: any) {\n      const user = await this.usersService.getById(payload.id);\n      if (!user) {\n        throw new HttpException(\n          'Invalid token',\n          HttpStatus.UNAUTHORIZED,\n        );\n      }\n      return user;\n    }\n\n    public async validateSocialAuthUser(payload: any, type: string) {\n      const user = await this.usersService.getByParameter({email : payload.email});\n      if (!user) {\n        const newUser = await this.usersService.create({\n          email: payload.email,\n          name: payload.firstName + ' ' + payload.lastName,\n          provider: type,\n        });\n        return newUser;\n      }\n      return user;\n    }\n    \n    public async syncSocialAuth(payload: any){\n      const token = {\n        id : payload.id\n      }\n      return await this.createToken(token);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CacheService.html":{"url":"injectables/CacheService.html","title":"injectable - CacheService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CacheService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/util/services/cache.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                get\n                            \n                            \n                                    Public\n                                    Async\n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/util/services/cache.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string, type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/util/services/cache.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'JSON'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        set\n                        \n                    \n                \n            \n            \n                \n                    \n                    set(key: string, time: number, value: any, type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/util/services/cache.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    time\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'JSON'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/modules/util/services/cache.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import redis from 'ioredis';\nimport { ConfigService } from '@nestjs/config';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class CacheService {\n\n  private client;\n\n  constructor(configService: ConfigService) {\n    const options = {\n        host: configService.get('cache.redis.host'),\n        port: configService.get('cache.redis.port'),\n    };\n    this.client = new redis(options);\n  }\n\n  public async get(key: string, type: string = 'JSON') {\n    const value = await this.client.get(key);\n    if(type === 'JSON'){\n      return JSON.parse(value);\n    }\n    return value;\n  }\n\n  public async set(key: string, time:number, value: any, type: string = 'JSON') {\n    if(type === 'JSON'){\n      value = JSON.stringify(value);\n    }\n    await this.client.setex(key, time, value);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProductsDto.html":{"url":"classes/CreateProductsDto.html","title":"class - CreateProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/dtos/create-products.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/dtos/create-products.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/dtos/create-products.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/dtos/create-products.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsNotEmpty,\n    IsString,\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n\n  export class CreateProductsDto {\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    price: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    description  : string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUsersDto.html":{"url":"classes/CreateUsersDto.html","title":"class - CreateUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/create-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                provider\n                            \n                            \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@Validate(EmailFilter, ['email'])@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-users.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-users.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(8)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-users.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-users.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/create-users.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    MinLength,\n    Validate,\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n  import { Roles } from '../enums/roles.enum';\n  import { EmailFilter } from '../filters/email.filter';\n\n  export class CreateUsersDto {\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    name: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @Validate(EmailFilter, ['email'])\n    @ApiProperty()\n    email: string;\n  \n    @IsString()\n    @IsOptional()\n    @MinLength(8)\n    @ApiProperty()\n    password?: string;\n  \n    @IsOptional()\n    @ApiProperty()\n    role?: Roles;\n  \n    @IsString()\n    @IsOptional()\n    @ApiProperty()\n    provider?: string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailAvailabilityDto.html":{"url":"classes/EmailAvailabilityDto.html","title":"class - EmailAvailabilityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailAvailabilityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/email-availability.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/email-availability.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n\n  export class EmailAvailabilityDto {\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @ApiProperty()\n    email: string;\n\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailFilter.html":{"url":"injectables/EmailFilter.html","title":"injectable - EmailFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/filters/email.filter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/filters/email.filter.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/filters/email.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/filters/email.filter.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ValidationArguments, ValidatorConstraint } from 'class-validator';\nimport { UsersService } from '../services/users.service';    \n\n@ValidatorConstraint({ name: 'emailFilter', async: true })\n@Injectable()\nexport class EmailFilter {\n  constructor(private readonly usersService: UsersService) {}\n\n  async validate(email: string) {\n    const user = await this.usersService.getByParameter({ email: email});\n    return !user;\n\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'User with this email already exists.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookGuard.html":{"url":"injectables/FacebookGuard.html","title":"injectable - FacebookGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/facebook.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class FacebookGuard extends AuthGuard('facebook'){}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/facebook.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/facebook.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: Profile, done: (err: any,user: any,info: any) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/facebook.strategy.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                            Profile\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { Profile, Strategy } from \"passport-facebook\";\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from '../../auth/services/auth.service';\nimport { Providers } from '../../auth/enums/providers.enum';\n\n@Injectable()\nexport class FacebookStrategy extends PassportStrategy(Strategy, \"facebook\") {\n  constructor(\n    private authService: AuthService,\n    private configService: ConfigService\n  ) {\n    super({\n      clientID: configService.get('services.facebook.clientId'),\n      clientSecret: configService.get('services.facebook.clientSecret'),\n      callbackURL: configService.get('services.facebook.callbackUri'),\n      scope: \"email\",\n      profileFields: [\"emails\", \"name\"],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile,\n    done: (err: any, user: any, info?: any) => void\n  ): Promise {\n    const { name, emails } = profile;\n    const payload = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n    };\n    const user = await this.authService.validateSocialAuthUser(payload, Providers.FACEBOOk);\n    if (!user) {\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    }\n    done(null, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleGuard.html":{"url":"injectables/GoogleGuard.html","title":"injectable - GoogleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/google.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GoogleGuard extends AuthGuard('google'){}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/google.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/google.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/google.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { AuthService } from '../../auth/services/auth.service';\nimport { Providers } from '../../auth/enums/providers.enum';\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor(\n    private authService: AuthService,\n    private configService: ConfigService\n  ) {\n    super({\n      clientID: configService.get('services.google.clientId'),\n      clientSecret: configService.get('services.google.clientSecret'),\n      callbackURL: configService.get('services.google.callbackUri'),\n      scope: ['email', 'profile'],\n    });\n  }\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    const { name, emails, photos } = profile;\n    const payload = {\n      email: emails[0].value,\n      firstName: name.givenName,\n      lastName: name.familyName,\n      picture: photos[0].value,\n      accessToken,\n      refreshToken,\n    };\n    const user = await this.authService.validateSocialAuthUser(payload, Providers.GOOGLE);\n    if (!user) {\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    }\n    done(null, user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashService.html":{"url":"injectables/HashService.html","title":"injectable - HashService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/util/services/hash.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                compare\n                            \n                            \n                                    Public\n                                    Async\n                                make\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        compare\n                        \n                    \n                \n            \n            \n                \n                    \n                    compare(password1: string, password2: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/util/services/hash.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password1\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password2\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        make\n                        \n                    \n                \n            \n            \n                \n                    \n                    make(password: string, length: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/util/services/hash.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        12\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { hash, compare } from 'bcrypt';\n\n@Injectable()\nexport class HashService {\n    \n  public async make(password: string, length: number = 12) {\n    return await hash(password, length);\n  }\n\n  public async compare(password1: string, password2: string){\n    const isPasswordMatching = await compare(password1, password2);\n    return isPasswordMatching;\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdParamValidation.html":{"url":"classes/IdParamValidation.html","title":"class - IdParamValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdParamValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/util/decorators/id-param-validation.decorator.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/util/decorators/id-param-validation.decorator.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsInt, IsNotEmpty } from 'class-validator';\n \nexport class IdParamValidation{\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                            \n                                    Private\n                                getToken\n                            \n                            \n                                handleRequest\n                            \n                            \n                                    Private\n                                throwException\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getToken(ctx: ExecutionContext, client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt.guard.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(error, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        throwException\n                        \n                    \n                \n            \n            \n                \n                    \n                    throwException(ctx: ExecutionContext, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/jwt.guard.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtGuard extends AuthGuard('jwt') {\n    \n    public canActivate(context: ExecutionContext) {\n        const client = context.switchToHttp().getRequest();\n        const token =  this.getToken(context, client);\n        return super.canActivate(context);\n    }\n    \n    handleRequest(error, user, info) {\n        if (error || !user) {\n            throw error || new UnauthorizedException();\n        }\n        return user;\n    }\n\n    private getToken(ctx: ExecutionContext, client:any){\n        const authorization = client.headers.authorization?.split(' ');\n\n        if(!authorization) {\n            this.throwException(ctx, 'Token not found');\n        }\n\n        if (authorization[0].toLowerCase() !== 'bearer') {\n            this.throwException(ctx, 'Authorization type not valid');\n        }\n\n        if (!authorization[1]) {\n            this.throwException(ctx, 'Token not provided');\n        }\n      \n        return authorization[1];\n      \n    }\n\n    private throwException(ctx: ExecutionContext, message: string) {    \n        throw new UnauthorizedException(message);\n    }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/strategies/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ConfigService } from '@nestjs/config';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { AuthService } from '../../auth/services/auth.service';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private authService: AuthService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('app.jwtkey'),\n    });\n  }\n\n  async validate(payload) {\n    const user = await this.authService.validateBasicAuthUser(payload);\n    if (!user) {\n      throw new HttpException('Invalid token', HttpStatus.UNAUTHORIZED);\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/login.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsString,\n    MinLength\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n\n  export class LoginDto {\n\n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @ApiProperty()\n    email: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @ApiProperty()\n    password: string;\n  \n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/util/services/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/util/services/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/util/services/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/controllers/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(response, createProductsDto: CreateProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Create product'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'Product has been created successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createProductsDto\n                                    \n                                                CreateProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(response, undefined: IdParamValidation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Delete product'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'Product has been deleted successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products.controller.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                IdParamValidation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(response, orderBy?: \"asc\" | \"desc\")\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@RolesAllowed(Roles.USER, Roles.ADMIN)@ApiOperation({summary: 'Get products'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'Products has been fetched successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orderBy\n                                    \n                                            \"asc\" | \"desc\"\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(response, undefined: IdParamValidation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@RolesAllowed(Roles.USER, Roles.ADMIN)@ApiOperation({summary: 'Get product'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'Product has been fetched successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                IdParamValidation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(response, undefined: IdParamValidation, updateProductsDto: UpdateProductsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Update product'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'Product has been updated successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/products/controllers/products.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                IdParamValidation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductsDto\n                                    \n                                                UpdateProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpStatus, Param, Post, Put, Query, Res, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { ProductsService } from '../services/products.service';\nimport { CacheService } from '../../util/services/Cache.service';\nimport { Response as ResponseType  } from '../../util/enums/response.enum';\nimport { CreateProductsDto } from \"../dtos/create-products.dto\";\nimport { UpdateProductsDto } from \"../dtos/update-products.dto\";\nimport { RoleGuard } from \"../../auth/guards/role.guard\";\nimport JwtGuard from \"../../auth/guards/jwt.guard\";\nimport {Roles} from \"../../users/enums/roles.enum\";\nimport { RolesAllowed } from '../../auth/decorators/role.decorator';\nimport {IdParamValidation} from '../../util/decorators/id-param-validation.decorator';\n\n@ApiTags('Products')\n@ApiBearerAuth()\n@Controller('products')\n@UseGuards(JwtGuard, RoleGuard)\nexport class ProductsController {\n\n    constructor(\n        private readonly cacheService: CacheService,\n        private readonly productsService: ProductsService\n    ){}\n\n    @Get()\n    @RolesAllowed(Roles.USER, Roles.ADMIN)\n    @ApiOperation({ summary: 'Get products' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Products has been fetched successfully',\n    })\n    public async getAll(\n      @Res() response,\n      @Query('orderBy') orderBy?: 'asc' | 'desc', \n    ){        \n      try {\n        const cacheKey = 'product:getAll';\n        const cachedData =  await this.cacheService.get(cacheKey);\n        if(cachedData){\n          return response.status(HttpStatus.OK).json({\n            type: ResponseType.SUCCESS,\n            message: 'Products has been fetched successfully',\n            data: cachedData,\n          });\n        }\n        const products = await this.productsService.getAll({ orderBy: {updatedAt: orderBy}});\n        await this.cacheService.set(cacheKey, 60, products);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'Products has been fetched successfully',\n          data: products,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }   \n\n    @Get('/:id')\n    @RolesAllowed(Roles.USER, Roles.ADMIN)\n    @ApiOperation({ summary: 'Get product' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Product has been fetched successfully',\n    })\n    public async getById(@Res() response, @Param() {id} : IdParamValidation) {\n      try {\n        const product = await this.productsService.getById(id);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'Product has been fetched successfully',\n          data: product,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }\n\n    @Post()\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Create product' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Product has been created successfully',\n    })\n    public async create(@Res() response, @Body() createProductsDto: CreateProductsDto) {\n      try {\n        const product = await this.productsService.create(createProductsDto);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'Product has been created successfully',\n          data: product,\n        });\n      } catch (error) {\n        console.log('error', error);\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }\n\n    @Put('/:id')\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Update product' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Product has been updated successfully',\n    })\n    public async update(@Res() response, @Param() {id} : IdParamValidation, @Body() updateProductsDto: UpdateProductsDto) {\n      try {\n        const product = await this.productsService.update(id, updateProductsDto);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'Product has been updated successfully',\n          data: product,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }  \n    \n    @Delete('/:id')\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Delete product' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Product has been deleted successfully',\n    })\n    public async delete(@Res() response, @Param() {id} : IdParamValidation) {\n      try {\n        const product = await this.productsService.delete(id);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'Product has been deleted successfully',\n          data: product,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nProductsService \n\nProductsService \n\n\n\nProductsModule\n\nProductsModule\n\nPrismaService  -->\n\nProductsModule->PrismaService \n\n\n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nCacheService\n\nCacheService\n\nProductsModule -->\n\nCacheService->ProductsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nProductsModule -->\n\nPrismaService->ProductsModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CacheService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            ProductsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                        \n                            ProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module } from '@nestjs/common';\n\nimport { ProductsService } from './services/products.service';\nimport { ProductsController } from './controllers/products.controller';\nimport { PrismaService } from '../util/services/prisma.service';\nimport { CacheService } from '../util/services/Cache.service';\n\n@Module({\n  imports: [],\n  controllers: [ProductsController],\n  providers: [\n    ProductsService,\n    PrismaService,\n    CacheService\n  ],\n  exports: [\n    ProductsService,\n    PrismaService\n  ],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/services/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByParameter\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/products/services/products.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createProductsDto: CreateProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createProductsDto\n                                    \n                                                CreateProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(query: object)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByParameter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByParameter(query: object)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateProductsDto: UpdateProductsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/products/services/products.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProductsDto\n                                    \n                                                UpdateProductsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { PrismaService } from '../../util/services/prisma.service';\nimport { CreateProductsDto } from \"../dtos/create-products.dto\";\nimport { UpdateProductsDto } from \"../dtos/update-products.dto\";\n\n@Injectable()\nexport class ProductsService {\n    constructor(\n        private readonly prisma: PrismaService,\n    ) {}\n\n    public async getAll(query:object) {\n        return await this.prisma.product.findMany(query);\n    }\n\n    public async getById(id: number) {\n        return await this.prisma.product.findFirst({where: {id : id}});\n    }\n\n    public async getByParameter(query: object) {\n        return await this.prisma.product.findFirst({where : query});\n    }\n\n    public async create(createProductsDto:CreateProductsDto) {\n        const product =  await this.prisma.product.create({data: createProductsDto});\n        return product;\n\n    }\n\n    public async update(id: number, updateProductsDto: UpdateProductsDto) {\n        return await this.prisma.product.update({\n            data : updateProductsDto,\n            where : {\n                id : id\n            }\n        });\n    }\n    \n    public async delete(id: number) {\n        return await this.prisma.product.delete({\n            where : {\n                id : id\n            }\n        });\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dtos/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                password_confirmation\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/register.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/register.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password_confirmation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@ApiProperty()@Match('password')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dtos/register.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    MinLength,\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n  import { Match } from '../decorators/match.decorator';\n  \n  export class RegisterDto {\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    name: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @ApiProperty()\n    email: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @ApiProperty()\n    password: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @MinLength(8)\n    @ApiProperty()\n    @Match('password')\n    password_confirmation: string;\n\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/guards/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/guards/role.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/guards/role.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Roles } from '../../users/enums/roles.enum';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const roles =\n      this.reflector.getAllAndMerge('roles', [\n        context.getClass(),\n        context.getHandler(),\n      ]) || [];\n\n    if (!roles) {\n      return true;\n    }\n\n    let isAllowed = false;\n\n    const request = context.switchToHttp().getRequest().user;\n\n    roles.forEach((role) => {\n      if (request.role === role) {\n        isAllowed = true;\n      }\n    });\n\n    return isAllowed;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProductsDto.html":{"url":"classes/UpdateProductsDto.html","title":"class - UpdateProductsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProductsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/products/dtos/update-products.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/dtos/update-products.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/dtos/update-products.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/products/dtos/update-products.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsNotEmpty,\n    IsString,\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n\n  export class UpdateProductsDto {\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    name: string;\n\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    price: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    description  : string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUsersDto.html":{"url":"classes/UpdateUsersDto.html","title":"class - UpdateUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/dtos/update-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                    Optional\n                                provider\n                            \n                            \n                                    Optional\n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-users.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-users.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(8)@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-users.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-users.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/dtos/update-users.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    IsEmail,\n    IsNotEmpty,\n    IsOptional,\n    IsString,\n    MinLength,\n  } from 'class-validator';\n  import { ApiProperty } from '@nestjs/swagger';\n  import { Roles } from '../enums/roles.enum';\n\n  export class UpdateUsersDto {\n    @IsString()\n    @IsNotEmpty()\n    @ApiProperty()\n    name: string;\n  \n    @IsString()\n    @IsNotEmpty()\n    @IsEmail()\n    @ApiProperty()\n    email: string;\n  \n    @IsString()\n    @IsOptional()\n    @MinLength(8)\n    @ApiProperty()\n    password?: string;\n  \n    @IsOptional()\n    @ApiProperty()\n    role?: Roles;\n  \n    @IsString()\n    @IsOptional()\n    @ApiProperty()\n    provider?: string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreatedEvent.html":{"url":"classes/UserCreatedEvent.html","title":"class - UserCreatedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreatedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/events/user-created.event.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/events/user-created.event.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/users/events/user-created.event.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserCreatedEvent {\n  public id: number;\n\n  constructor(id: number) {\n    this.id = id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreatedListener.html":{"url":"injectables/UserCreatedListener.html","title":"injectable - UserCreatedListener","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreatedListener\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/listeners/user-created.listener.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleUserCreatedEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/listeners/user-created.listener.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleUserCreatedEvent\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleUserCreatedEvent(event: UserCreatedEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnEvent('user.created')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/listeners/user-created.listener.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                UserCreatedEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { UserCreatedEvent } from '../events/user-created.event';\nimport { AuthService } from '../../auth/services/auth.service';\nimport { UsersService } from '../services/users.service';\n\n@Injectable()\nexport class UserCreatedListener {\n  constructor(\n    private readonly authService:  AuthService,\n    private readonly usersService:  UsersService\n  ) {  \n  }\n\n  @OnEvent('user.created')\n  async handleUserCreatedEvent(event: UserCreatedEvent) {\n    const id = event.id;\n    const user = await this.usersService.getByParameter({id : id});\n    await this.authService.sendWelcomeGreeting(user);\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/controllers/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(response, createUsersDto: CreateUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Create user'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'User has been created successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUsersDto\n                                    \n                                                CreateUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(response, undefined: IdParamValidation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Delete user'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'User has been deleted successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                IdParamValidation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(response, orderBy?: \"asc\" | \"desc\")\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Get users'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'Users has been fetched successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orderBy\n                                    \n                                            \"asc\" | \"desc\"\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(response, undefined: IdParamValidation)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Get user'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'User has been fetched successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                IdParamValidation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(response, undefined: IdParamValidation, updateUsersDto: UpdateUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@RolesAllowed(Roles.ADMIN)@ApiOperation({summary: 'Update user'})@ApiResponse({status: 400, description: 'Something went wrong, Please try again later'})@ApiResponse({status: 200, description: 'User has been updated successfully'})\n                \n            \n\n            \n                \n                    Defined in src/modules/users/controllers/users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                IdParamValidation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUsersDto\n                                    \n                                                UpdateUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, Get, HttpStatus, Param, Post, Put, Query, Res, UseGuards } from \"@nestjs/common\";\nimport { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags } from \"@nestjs/swagger\";\n\nimport { UsersService } from '../services/users.service';\nimport { Response as ResponseType  } from '../../util/enums/response.enum';\nimport { CreateUsersDto } from \"../dtos/create-users.dto\";\nimport { UpdateUsersDto } from \"../dtos/update-users.dto\";\nimport { RoleGuard } from \"../../auth/guards/role.guard\";\nimport JwtGuard from \"../../auth/guards/jwt.guard\";\nimport {Roles} from \"../enums/roles.enum\";\nimport { RolesAllowed } from '../../auth/decorators/role.decorator';\nimport {IdParamValidation} from '../../util/decorators/id-param-validation.decorator';\n\n@ApiTags('Users')\n@ApiBearerAuth()\n@Controller('users')\n@UseGuards(JwtGuard, RoleGuard)\nexport class UsersController {\n\n    constructor(\n        private readonly usersService: UsersService\n    ){}\n\n    @Get()\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Get users' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'Users has been fetched successfully',\n    })\n    public async getAll(\n      @Res() response,\n      @Query('orderBy') orderBy?: 'asc' | 'desc', \n    ){        \n      try {\n        const users = await this.usersService.getAll({ orderBy: {updatedAt: orderBy}});\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'Users has been fetched successfully',\n          data: users,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }   \n\n    @Get('/:id')\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Get user' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'User has been fetched successfully',\n    })\n    public async getById(@Res() response, @Param() {id} : IdParamValidation) {\n      try {\n        const user = await this.usersService.getById(id);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'User has been fetched successfully',\n          data: user,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }\n\n    @Post()\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Create user' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'User has been created successfully',\n    })\n    public async create(@Res() response, @Body() createUsersDto: CreateUsersDto) {\n      try {\n        const user = await this.usersService.create(createUsersDto);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'User has been created successfully',\n          data: user,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }\n\n    @Put('/:id')\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Update user' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'User has been updated successfully',\n    })\n    public async update(@Res() response,  @Param() {id} : IdParamValidation, @Body() updateUsersDto: UpdateUsersDto) {\n      try {\n        const user = await this.usersService.update(id, updateUsersDto);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'User has been updated successfully',\n          data: user,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }  \n    \n    @Delete('/:id')\n    @RolesAllowed(Roles.ADMIN)\n    @ApiOperation({ summary: 'Delete user' })\n    @ApiResponse({\n      status: 400,\n      description: 'Something went wrong, Please try again later',\n    })\n    @ApiResponse({\n      status: 200,\n      description: 'User has been deleted successfully',\n    })\n    public async delete(@Res() response,  @Param() {id} : IdParamValidation) {\n      try {\n        const user = await this.usersService.delete(id);\n        return response.status(HttpStatus.OK).json({\n          type: ResponseType.SUCCESS,\n          message: 'User has been deleted successfully',\n          data: user,\n        });\n      } catch (error) {\n        return response.status(HttpStatus.BAD_REQUEST).json({\n          type: ResponseType.ERROR,\n          message: 'Something went wrong, Please try again later',\n          data: null,\n        });\n      }\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nPrismaService  -->\n\nUsersModule->PrismaService \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nEmailFilter\n\nEmailFilter\n\nUsersModule -->\n\nEmailFilter->UsersModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailFilter\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {forwardRef, Module } from '@nestjs/common';\n\nimport { UsersService } from './services/users.service';\nimport { UsersController } from './controllers/users.controller';\nimport { PrismaService } from '../util/services/prisma.service';\nimport { EmailFilter } from './filters/email.filter';\nimport { AuthModule } from '../auth/auth.module';\nimport { JwtService } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule)\n  ],\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    PrismaService,\n    EmailFilter,\n  ],\n  exports: [\n    UsersService,\n    PrismaService\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/services/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                getAll\n                            \n                            \n                                    Public\n                                    Async\n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                getByParameter\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, hashService: HashService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/services/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashService\n                                                  \n                                                        \n                                                                        HashService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUsersDto: CreateUsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUsersDto\n                                    \n                                                CreateUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(query: object)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getByParameter\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByParameter(query: object)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: number, updateUsersDto: UpdateUsersDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/services/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUsersDto\n                                    \n                                                UpdateUsersDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\nimport { PrismaService } from '../../util/services/prisma.service';\nimport { HashService } from '../../util/services/hash.service';\nimport { CreateUsersDto } from \"../dtos/create-users.dto\";\nimport { UpdateUsersDto } from \"../dtos/update-users.dto\";\n\n@Injectable()\nexport class UsersService {\n    constructor(\n        private readonly prisma: PrismaService,\n        private readonly hashService : HashService,\n    ) {}\n\n    public async getAll(query:object) {\n        return await this.prisma.user.findMany(query);\n    }\n\n    public async getById(id: number) {\n        return await this.prisma.user.findFirst({where: {id : id}});\n    }\n\n    public async getByParameter(query: object) {\n        return await this.prisma.user.findFirst({where : query});\n    }\n\n    public async create(createUsersDto:CreateUsersDto) {\n        if(createUsersDto.password){\n            createUsersDto.password = await this.hashService.make(createUsersDto.password);\n        }\n        const user =  await this.prisma.user.create({data: createUsersDto});\n        return user;\n    }\n\n    public async update(id: number, updateUsersDto: UpdateUsersDto) {\n        return await this.prisma.user.update({\n            data : updateUsersDto,\n            where : {\n                id : id\n            }\n        });\n    }\n    \n    public async delete(id: number) {\n        return await this.prisma.user.delete({\n            where : {\n                id : id\n            }\n        });\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WelcomeGreetingQueue.html":{"url":"classes/WelcomeGreetingQueue.html","title":"class - WelcomeGreetingQueue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WelcomeGreetingQueue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/queues/welcome-greeting.queue.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onActive\n                            \n                            \n                                onCompleted\n                            \n                            \n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/queues/welcome-greeting.queue.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onActive\n                        \n                    \n                \n            \n            \n                \nonActive(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnQueueActive()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/queues/welcome-greeting.queue.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onCompleted\n                        \n                    \n                \n            \n            \n                \nonCompleted(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @OnQueueCompleted()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/queues/welcome-greeting.queue.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        send\n                        \n                    \n                \n            \n            \n                \n                    \n                    send(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('send-welcome-greeting')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/queues/welcome-greeting.queue.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport {\n  Processor,\n  Process,\n  OnQueueActive,\n  OnQueueCompleted,\n} from '@nestjs/bull';\nimport { Job } from 'bull';\n\n@Processor('welcome-greeting')\nexport class WelcomeGreetingQueue {\n  constructor(private readonly mailService: MailerService) {}\n\n  @OnQueueActive()\n  onActive(job: Job) {\n    console.log(`Processing job ${job.id} of type ${job.name}: ${job.data.id}`);\n  }\n\n  @OnQueueCompleted()\n  onCompleted(job: Job) {\n    console.log(`Job ${job.id} of type ${job.name} completed`);\n  }\n\n  @Process('send-welcome-greeting')\n  async send(job: Job) {\n    try {\n      console.log('send mail trigered', job);\n      await this.mailService.sendMail(job.data);\n    } catch (error) {\n      console.log(`Failed to send email | error: ${error.message}`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                prisma/seed.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                prisma/seed.ts\n            \n            variable\n            prisma\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/controllers/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/decorators/match.decorator.ts\n            \n            function\n            Match\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/decorators/role.decorator.ts\n            \n            variable\n            RolesAllowed\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/email-availability.dto.ts\n            \n            class\n            EmailAvailabilityDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dtos/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/facebook.guard.ts\n            \n            injectable\n            FacebookGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/google.guard.ts\n            \n            injectable\n            GoogleGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/auth/guards/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/products/controllers/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/products/dtos/create-products.dto.ts\n            \n            class\n            CreateProductsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/products/dtos/update-products.dto.ts\n            \n            class\n            UpdateProductsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/products/services/products.service.ts\n            \n            injectable\n            ProductsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/users/controllers/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/create-users.dto.ts\n            \n            class\n            CreateUsersDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/dtos/update-users.dto.ts\n            \n            class\n            UpdateUsersDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/users/events/user-created.event.ts\n            \n            class\n            UserCreatedEvent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/filters/email.filter.ts\n            \n            injectable\n            EmailFilter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/users/listeners/user-created.listener.ts\n            \n            injectable\n            UserCreatedListener\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/queues/welcome-greeting.queue.ts\n            \n            class\n            WelcomeGreetingQueue\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/util/decorators/id-param-validation.decorator.ts\n            \n            class\n            IdParamValidation\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/util/services/cache.service.ts\n            \n            injectable\n            CacheService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/util/services/hash.service.ts\n            \n            injectable\n            HashService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/util/services/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/bull : ^0.6.2\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/event-emitter : ^1.3.1\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^6.1.3\n        \n            @prisma/client : ^4.6.1\n        \n            bcrypt : ^5.1.0\n        \n            bull : ^4.10.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            handlebars : ^4.7.7\n        \n            helmet : ^6.0.0\n        \n            ioredis : ^5.2.4\n        \n            morgan : ^1.10.0\n        \n            nodemailer : ^6.8.0\n        \n            passport : ^0.6.0\n        \n            passport-facebook : ^3.0.0\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Providers   (src/.../providers.enum.ts)\n                        \n                        \n                            Response   (src/.../response.enum.ts)\n                        \n                        \n                            Roles   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/enums/providers.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Providers\n                    \n                \n                        \n                            \n                                 NATIVE\n                            \n                        \n                        \n                            \n                                Value : NATIVE\n                            \n                        \n                        \n                            \n                                 FACEBOOk\n                            \n                        \n                        \n                            \n                                Value : FACEBOOk\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : GOOGLE\n                            \n                        \n            \n        \n\n    src/modules/util/enums/response.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Response\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : success\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                Value : error\n                            \n                        \n            \n        \n\n    src/modules/users/enums/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Roles\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            main   (prisma/.../seed.ts)\n                        \n                        \n                            Match   (src/.../match.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    src/modules/auth/decorators/match.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Match\n                        \n                    \n                \n            \n            \n                \nMatch(property, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n                                    \n                                            ValidationOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAuthy\nAuthy is an application  that has JWT based authentication system. it supports social login(Google, Facebook).\nFeatures\n\nLogin\nRegistration\nSocial Login\nEmail notification\n\nTech\n\n[NestJS] - duh\n[Redis] - cache & queues \n[postgres] - database\n\nInstallation\n$ npm installRunning the app\nCopy the example env file and make the required configuration changes in the .env file\ncp .env.example .env\n#run the database migrations and seeds \n$ npx prisma migrate deploy\n$ npx prisma db seed\n\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_exports\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashService \n\nHashService \n\nHashService  -->\n\nAuthModule->HashService \n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nProductsModule->PrismaService \n\n\n\n\n\nProductsService \n\nProductsService \n\nProductsService  -->\n\nProductsModule->ProductsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\nPrismaService  -->\n\nUsersModule->PrismaService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nHashService\n\nHashService\n\nAuthModule -->\n\nHashService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserCreatedListener\n\nUserCreatedListener\n\nAuthModule -->\n\nUserCreatedListener->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCacheService\n\nCacheService\n\nProductsModule -->\n\nCacheService->ProductsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nProductsModule -->\n\nPrismaService->ProductsModule\n\n\n\nUsersModule -->\n\nPrismaService->UsersModule\n\n\n\n\n\nProductsService\n\nProductsService\n\nProductsModule -->\n\nProductsService->ProductsModule\n\n\n\n\n\nEmailFilter\n\nEmailFilter\n\nUsersModule -->\n\nEmailFilter->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : authy API\n        \n            License : UNLICENSED\n        \n            Author : nadeera\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            prisma   (prisma/.../seed.ts)\n                        \n                        \n                            RolesAllowed   (src/.../role.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    prisma/seed.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PrismaClient()\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/decorators/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RolesAllowed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Roles[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
